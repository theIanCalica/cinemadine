{"ast":null,"code":"import _regeneratorRuntime from \"C:/School/3rd year/cinemadine/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/School/3rd year/cinemadine/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from \"C:/School/3rd year/cinemadine/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _inherits from \"C:/School/3rd year/cinemadine/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/School/3rd year/cinemadine/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _wrapNativeSuper from \"C:/School/3rd year/cinemadine/frontend/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\nimport _createClass from \"C:/School/3rd year/cinemadine/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/School/3rd year/cinemadine/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _slicedToArray from \"C:/School/3rd year/cinemadine/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toArray from \"C:/School/3rd year/cinemadine/frontend/node_modules/@babel/runtime/helpers/esm/toArray.js\";\nimport _createForOfIteratorHelper from \"C:/School/3rd year/cinemadine/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"C:/School/3rd year/cinemadine/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nvar _loadLazyRouteChildren, _loadLazyRouteModule, _callDataStrategyImpl, _callLoaderOrAction, _convertHandlerResultToDataResult, _resolveDeferredResults, _resolveDeferredData;\n/**\n * @remix-run/router v1.19.1\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\nvar PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _options = options,\n    _options$initialEntri = _options.initialEntries,\n    initialEntries = _options$initialEntri === void 0 ? [\"/\"] : _options$initialEntri,\n    initialIndex = _options.initialIndex,\n    _options$v5Compat = _options.v5Compat,\n    v5Compat = _options$v5Compat === void 0 ? false : _options$v5Compat;\n  var entries; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map(function (entry, index) {\n    return createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined);\n  });\n  var index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  var action = Action.Pop;\n  var listener = null;\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation() {\n    return entries[index];\n  }\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n    var location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  var history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref: createHref,\n    createURL: function createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation: function encodeLocation(to) {\n      var path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n    push: function push(to, state) {\n      action = Action.Push;\n      var nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({\n          action: action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n    replace: function replace(to, state) {\n      action = Action.Replace;\n      var nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({\n          action: action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n    go: function go(delta) {\n      action = Action.Pop;\n      var nextIndex = clampIndex(index + delta);\n      var nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({\n          action: action,\n          location: nextLocation,\n          delta: delta\n        });\n      }\n    },\n    listen: function listen(fn) {\n      listener = fn;\n      return function () {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createBrowserLocation(window, globalHistory) {\n    var _window$location = window.location,\n      pathname = _window$location.pathname,\n      search = _window$location.search,\n      hash = _window$location.hash;\n    return createLocation(\"\", {\n      pathname: pathname,\n      search: search,\n      hash: hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createHashLocation(window, globalHistory) {\n    var _parsePath = parsePath(window.location.hash.substr(1)),\n      _parsePath$pathname = _parsePath.pathname,\n      pathname = _parsePath$pathname === void 0 ? \"/\" : _parsePath$pathname,\n      _parsePath$search = _parsePath.search,\n      search = _parsePath$search === void 0 ? \"\" : _parsePath$search,\n      _parsePath$hash = _parsePath.hash,\n      hash = _parsePath$hash === void 0 ? \"\" : _parsePath$hash;\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n    return createLocation(\"\", {\n      pathname: pathname,\n      search: search,\n      hash: hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createHashHref(window, to) {\n    var base = window.document.querySelector(\"base\");\n    var href = \"\";\n    if (base && base.getAttribute(\"href\")) {\n      var url = window.location.href;\n      var hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n  var location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state: state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nfunction createPath(_ref) {\n  var _ref$pathname = _ref.pathname,\n    pathname = _ref$pathname === void 0 ? \"/\" : _ref$pathname,\n    _ref$search = _ref.search,\n    search = _ref$search === void 0 ? \"\" : _ref$search,\n    _ref$hash = _ref.hash,\n    hash = _ref$hash === void 0 ? \"\" : _ref$hash;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nfunction parsePath(path) {\n  var parsedPath = {};\n  if (path) {\n    var hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n    var searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n  return parsedPath;\n}\nfunction getUrlBasedHistory(getLocation, _createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _options2 = options,\n    _options2$window = _options2.window,\n    window = _options2$window === void 0 ? document.defaultView : _options2$window,\n    _options2$v5Compat = _options2.v5Compat,\n    v5Compat = _options2$v5Compat === void 0 ? false : _options2$v5Compat;\n  var globalHistory = window.history;\n  var action = Action.Pop;\n  var listener = null;\n  var index = getIndex();\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n  function getIndex() {\n    var state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n  function handlePop() {\n    action = Action.Pop;\n    var nextIndex = getIndex();\n    var delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({\n        action: action,\n        location: history.location,\n        delta: delta\n      });\n    }\n  }\n  function push(to, state) {\n    action = Action.Push;\n    var location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    var historyState = getHistoryState(location, index);\n    var url = history.createHref(location);\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n    if (v5Compat && listener) {\n      listener({\n        action: action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n  function replace(to, state) {\n    action = Action.Replace;\n    var location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    var historyState = getHistoryState(location, index);\n    var url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n    if (v5Compat && listener) {\n      listener({\n        action: action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    var base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    var href = typeof to === \"string\" ? to : createPath(to);\n    // Treating this as a full URL will strip any trailing spaces so we need to\n    // pre-encode them since they might be part of a matching splat param from\n    // an ancestor route\n    href = href.replace(/ $/, \"%20\");\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n  var history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen: function listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return function () {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref: function createHref(to) {\n      return _createHref(window, to);\n    },\n    createURL: createURL,\n    encodeLocation: function encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      var url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push: push,\n    replace: replace,\n    go: function go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n}\n//#endregion\n\nvar ResultType;\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\nvar immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\nfunction isIndexRoute(route) {\n  return route.index === true;\n}\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nfunction convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  if (manifest === void 0) {\n    manifest = {};\n  }\n  return routes.map(function (route, index) {\n    var treePath = [].concat(_toConsumableArray(parentPath), [String(index)]);\n    var id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    if (isIndexRoute(route)) {\n      var indexRoute = _extends({}, route, mapRouteProperties(route), {\n        id: id\n      });\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      var pathOrLayoutRoute = _extends({}, route, mapRouteProperties(route), {\n        id: id,\n        children: undefined\n      });\n      manifest[id] = pathOrLayoutRoute;\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest);\n      }\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n  return matchRoutesImpl(routes, locationArg, basename, false);\n}\nfunction matchRoutesImpl(routes, locationArg, basename, allowPartial) {\n  var location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  var pathname = stripBasename(location.pathname || \"/\", basename);\n  if (pathname == null) {\n    return null;\n  }\n  var branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  var matches = null;\n  for (var i = 0; matches == null && i < branches.length; ++i) {\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    var decoded = decodePath(pathname);\n    matches = matchRouteBranch(branches[i], decoded, allowPartial);\n  }\n  return matches;\n}\nfunction convertRouteMatchToUiMatch(match, loaderData) {\n  var route = match.route,\n    pathname = match.pathname,\n    params = match.params;\n  return {\n    id: route.id,\n    pathname: pathname,\n    params: params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n  var flattenRoute = function flattenRoute(route, index, relativePath) {\n    var meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route: route\n    };\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    var path = joinPaths([parentPath, meta.relativePath]);\n    var routesMeta = parentsMeta.concat(meta);\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n      // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path: path,\n      score: computeScore(path, route.index),\n      routesMeta: routesMeta\n    });\n  };\n  routes.forEach(function (route, index) {\n    var _route$path;\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      var _iterator = _createForOfIteratorHelper(explodeOptionalSegments(route.path)),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var exploded = _step.value;\n          flattenRoute(route, index, exploded);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path) {\n  var segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  var _segments = _toArray(segments),\n    first = _segments[0],\n    rest = _segments.slice(1);\n  // Optional path segments are denoted by a trailing `?`\n  var isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  var required = first.replace(/\\?$/, \"\");\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n  var restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  var result = [];\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push.apply(result, _toConsumableArray(restExploded.map(function (subpath) {\n    return subpath === \"\" ? required : [required, subpath].join(\"/\");\n  })));\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push.apply(result, _toConsumableArray(restExploded));\n  }\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map(function (exploded) {\n    return path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded;\n  });\n}\nfunction rankRouteBranches(branches) {\n  branches.sort(function (a, b) {\n    return a.score !== b.score ? b.score - a.score // Higher score first\n    : compareIndexes(a.routesMeta.map(function (meta) {\n      return meta.childrenIndex;\n    }), b.routesMeta.map(function (meta) {\n      return meta.childrenIndex;\n    }));\n  });\n}\nvar paramRe = /^:[\\w-]+$/;\nvar dynamicSegmentValue = 3;\nvar indexRouteValue = 2;\nvar emptySegmentValue = 1;\nvar staticSegmentValue = 10;\nvar splatPenalty = -2;\nvar isSplat = function isSplat(s) {\n  return s === \"*\";\n};\nfunction computeScore(path, index) {\n  var segments = path.split(\"/\");\n  var initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter(function (s) {\n    return !isSplat(s);\n  }).reduce(function (score, segment) {\n    return score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue);\n  }, initialScore);\n}\nfunction compareIndexes(a, b) {\n  var siblings = a.length === b.length && a.slice(0, -1).every(function (n, i) {\n    return n === b[i];\n  });\n  return siblings ?\n  // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] :\n  // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\nfunction matchRouteBranch(branch, pathname, allowPartial) {\n  if (allowPartial === void 0) {\n    allowPartial = false;\n  }\n  var routesMeta = branch.routesMeta;\n  var matchedParams = {};\n  var matchedPathname = \"/\";\n  var matches = [];\n  for (var i = 0; i < routesMeta.length; ++i) {\n    var meta = routesMeta[i];\n    var end = i === routesMeta.length - 1;\n    var remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    var match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end: end\n    }, remainingPathname);\n    var route = meta.route;\n    if (!match && end && allowPartial && !routesMeta[routesMeta.length - 1].route.index) {\n      match = matchPath({\n        path: meta.relativePath,\n        caseSensitive: meta.caseSensitive,\n        end: false\n      }, remainingPathname);\n    }\n    if (!match) {\n      return null;\n    }\n    Object.assign(matchedParams, match.params);\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route: route\n    });\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n  var path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  }\n  // ensure `/` is added at the beginning if the path is absolute\n  var prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n  var stringify = function stringify(p) {\n    return p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n  };\n  var segments = path.split(/\\/+/).map(function (segment, index, array) {\n    var isLastSegment = index === array.length - 1;\n    // only apply the splat if it's the last segment\n    if (isLastSegment && segment === \"*\") {\n      var star = \"*\";\n      // Apply the splat\n      return stringify(params[star]);\n    }\n    var keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n    if (keyMatch) {\n      var _keyMatch = _slicedToArray(keyMatch, 3),\n        key = _keyMatch[1],\n        optional = _keyMatch[2];\n      var param = params[key];\n      invariant(optional === \"?\" || param != null, \"Missing \\\":\" + key + \"\\\" param\");\n      return stringify(param);\n    }\n    // Remove any optional markers from optional static segments\n    return segment.replace(/\\?$/g, \"\");\n  })\n  // Remove empty segments\n  .filter(function (segment) {\n    return !!segment;\n  });\n  return prefix + segments.join(\"/\");\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n  var _compilePath = compilePath(pattern.path, pattern.caseSensitive, pattern.end),\n    _compilePath2 = _slicedToArray(_compilePath, 2),\n    matcher = _compilePath2[0],\n    compiledParams = _compilePath2[1];\n  var match = pathname.match(matcher);\n  if (!match) return null;\n  var matchedPathname = match[0];\n  var pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  var captureGroups = match.slice(1);\n  var params = compiledParams.reduce(function (memo, _ref, index) {\n    var paramName = _ref.paramName,\n      isOptional = _ref.isOptional;\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      var splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n    var value = captureGroups[index];\n    if (isOptional && !value) {\n      memo[paramName] = undefined;\n    } else {\n      memo[paramName] = (value || \"\").replace(/%2F/g, \"/\");\n    }\n    return memo;\n  }, {});\n  return {\n    params: params,\n    pathname: matchedPathname,\n    pathnameBase: pathnameBase,\n    pattern: pattern\n  };\n}\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n  if (end === void 0) {\n    end = true;\n  }\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  var params = [];\n  var regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:([\\w-]+)(\\?)?/g, function (_, paramName, isOptional) {\n    params.push({\n      paramName: paramName,\n      isOptional: isOptional != null\n    });\n    return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n  });\n  if (path.endsWith(\"*\")) {\n    params.push({\n      paramName: \"*\"\n    });\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n  var matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, params];\n}\nfunction decodePath(value) {\n  try {\n    return value.split(\"/\").map(function (v) {\n      return decodeURIComponent(v).replace(/\\//g, \"%2F\");\n    }).join(\"/\");\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  var startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  var nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n  var _ref6 = typeof to === \"string\" ? parsePath(to) : to,\n    toPathname = _ref6.pathname,\n    _ref6$search = _ref6.search,\n    search = _ref6$search === void 0 ? \"\" : _ref6$search,\n    _ref6$hash = _ref6.hash,\n    hash = _ref6$hash === void 0 ? \"\" : _ref6$hash;\n  var pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname: pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  var segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  var relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(function (segment) {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nfunction getPathContributingMatches(matches) {\n  return matches.filter(function (match, index) {\n    return index === 0 || match.route.path && match.route.path.length > 0;\n  });\n}\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nfunction getResolveToMatches(matches, v7_relativeSplatPath) {\n  var pathMatches = getPathContributingMatches(matches);\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map(function (match, idx) {\n      return idx === pathMatches.length - 1 ? match.pathname : match.pathnameBase;\n    });\n  }\n  return pathMatches.map(function (match) {\n    return match.pathnameBase;\n  });\n}\n/**\n * @private\n */\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n  var to;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n  var isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  var toPathname = isEmptyPath ? \"/\" : to.pathname;\n  var from;\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    var routePathnameIndex = routePathnames.length - 1;\n    // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      var toSegments = toPathname.split(\"/\");\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join(\"/\");\n    }\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n  var path = resolvePath(to, from);\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  var hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  var hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n  return path;\n}\n/**\n * @private\n */\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\nvar joinPaths = function joinPaths(paths) {\n  return paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n};\n/**\n * @private\n */\nvar normalizePathname = function normalizePathname(pathname) {\n  return pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n};\n/**\n * @private\n */\nvar normalizeSearch = function normalizeSearch(search) {\n  return !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n};\n/**\n * @private\n */\nvar normalizeHash = function normalizeHash(hash) {\n  return !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n};\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nvar json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  var responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  var headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers: headers\n  }));\n};\nvar DataWithResponseInit = /*#__PURE__*/_createClass(function DataWithResponseInit(data, init) {\n  _classCallCheck(this, DataWithResponseInit);\n  this.type = \"DataWithResponseInit\";\n  this.data = data;\n  this.init = init || null;\n});\n/**\n * Create \"responses\" that contain `status`/`headers` without forcing\n * serialization into an actual `Response` - used by Remix single fetch\n */\nfunction data(data, init) {\n  return new DataWithResponseInit(data, typeof init === \"number\" ? {\n    status: init\n  } : init);\n}\nvar AbortedDeferredError = /*#__PURE__*/function (_Error) {\n  _inherits(AbortedDeferredError, _Error);\n  var _super = _createSuper(AbortedDeferredError);\n  function AbortedDeferredError() {\n    _classCallCheck(this, AbortedDeferredError);\n    return _super.apply(this, arguments);\n  }\n  return _createClass(AbortedDeferredError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nvar DeferredData = /*#__PURE__*/function (_resolveData) {\n  function DeferredData(data, responseInit) {\n    var _this = this;\n    _classCallCheck(this, DeferredData);\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\");\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    var reject;\n    this.abortPromise = new Promise(function (_, r) {\n      return reject = r;\n    });\n    this.controller = new AbortController();\n    var onAbort = function onAbort() {\n      return reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    };\n    this.unlistenAbortSignal = function () {\n      return _this.controller.signal.removeEventListener(\"abort\", onAbort);\n    };\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce(function (acc, _ref2) {\n      var _ref7 = _slicedToArray(_ref2, 2),\n        key = _ref7[0],\n        value = _ref7[1];\n      return Object.assign(acc, _defineProperty({}, key, _this.trackPromise(key, value)));\n    }, {});\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n    this.init = responseInit;\n  }\n  _createClass(DeferredData, [{\n    key: \"trackPromise\",\n    value: function trackPromise(key, value) {\n      var _this2 = this;\n      if (!(value instanceof Promise)) {\n        return value;\n      }\n      this.deferredKeys.push(key);\n      this.pendingKeysSet.add(key);\n      // We store a little wrapper promise that will be extended with\n      // _data/_error props upon resolve/reject\n      var promise = Promise.race([value, this.abortPromise]).then(function (data) {\n        return _this2.onSettle(promise, key, undefined, data);\n      }, function (error) {\n        return _this2.onSettle(promise, key, error);\n      });\n      // Register rejection listeners to avoid uncaught promise rejections on\n      // errors or aborted deferred values\n      promise.catch(function () {});\n      Object.defineProperty(promise, \"_tracked\", {\n        get: function get() {\n          return true;\n        }\n      });\n      return promise;\n    }\n  }, {\n    key: \"onSettle\",\n    value: function onSettle(promise, key, error, data) {\n      if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n        this.unlistenAbortSignal();\n        Object.defineProperty(promise, \"_error\", {\n          get: function get() {\n            return error;\n          }\n        });\n        return Promise.reject(error);\n      }\n      this.pendingKeysSet.delete(key);\n      if (this.done) {\n        // Nothing left to abort!\n        this.unlistenAbortSignal();\n      }\n      // If the promise was resolved/rejected with undefined, we'll throw an error as you\n      // should always resolve with a value or null\n      if (error === undefined && data === undefined) {\n        var undefinedError = new Error(\"Deferred data for key \\\"\" + key + \"\\\" resolved/rejected with `undefined`, \" + \"you must resolve/reject with a value or `null`.\");\n        Object.defineProperty(promise, \"_error\", {\n          get: function get() {\n            return undefinedError;\n          }\n        });\n        this.emit(false, key);\n        return Promise.reject(undefinedError);\n      }\n      if (data === undefined) {\n        Object.defineProperty(promise, \"_error\", {\n          get: function get() {\n            return error;\n          }\n        });\n        this.emit(false, key);\n        return Promise.reject(error);\n      }\n      Object.defineProperty(promise, \"_data\", {\n        get: function get() {\n          return data;\n        }\n      });\n      this.emit(false, key);\n      return data;\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(aborted, settledKey) {\n      this.subscribers.forEach(function (subscriber) {\n        return subscriber(aborted, settledKey);\n      });\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(fn) {\n      var _this3 = this;\n      this.subscribers.add(fn);\n      return function () {\n        return _this3.subscribers.delete(fn);\n      };\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      var _this4 = this;\n      this.controller.abort();\n      this.pendingKeysSet.forEach(function (v, k) {\n        return _this4.pendingKeysSet.delete(k);\n      });\n      this.emit(true);\n    }\n  }, {\n    key: \"resolveData\",\n    value: function resolveData(_x) {\n      return (_resolveData = _resolveData || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(signal) {\n        var _this5 = this;\n        var aborted, onAbort;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              aborted = false;\n              if (this.done) {\n                _context.next = 7;\n                break;\n              }\n              onAbort = function onAbort() {\n                return _this5.cancel();\n              };\n              signal.addEventListener(\"abort\", onAbort);\n              _context.next = 6;\n              return new Promise(function (resolve) {\n                _this5.subscribe(function (aborted) {\n                  signal.removeEventListener(\"abort\", onAbort);\n                  if (aborted || _this5.done) {\n                    resolve(aborted);\n                  }\n                });\n              });\n            case 6:\n              aborted = _context.sent;\n            case 7:\n              return _context.abrupt(\"return\", aborted);\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: \"done\",\n    get: function get() {\n      return this.pendingKeysSet.size === 0;\n    }\n  }, {\n    key: \"unwrappedData\",\n    get: function get() {\n      invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n      return Object.entries(this.data).reduce(function (acc, _ref3) {\n        var _ref8 = _slicedToArray(_ref3, 2),\n          key = _ref8[0],\n          value = _ref8[1];\n        return Object.assign(acc, _defineProperty({}, key, unwrapTrackedPromise(value)));\n      }, {});\n    }\n  }, {\n    key: \"pendingKeys\",\n    get: function get() {\n      return Array.from(this.pendingKeysSet);\n    }\n  }]);\n  return DeferredData;\n}();\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\nvar defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  var responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nvar redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n  var responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n  var headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers: headers\n  }));\n};\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nvar redirectDocument = function redirectDocument(url, init) {\n  var response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n/**\n * A redirect response that will perform a `history.replaceState` instead of a\n * `history.pushState` for client-side navigation redirects.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nvar replace = function replace(url, init) {\n  var response = redirect(url, init);\n  response.headers.set(\"X-Remix-Replace\", \"true\");\n  return response;\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nvar ErrorResponseImpl = /*#__PURE__*/_createClass(function ErrorResponseImpl(status, statusText, data, internal) {\n  _classCallCheck(this, ErrorResponseImpl);\n  if (internal === void 0) {\n    internal = false;\n  }\n  this.status = status;\n  this.statusText = statusText || \"\";\n  this.internal = internal;\n  if (data instanceof Error) {\n    this.data = data.toString();\n    this.error = data;\n  } else {\n    this.data = data;\n  }\n});\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\nvar validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nvar validMutationMethods = new Set(validMutationMethodsArr);\nvar validRequestMethodsArr = [\"get\"].concat(validMutationMethodsArr);\nvar validRequestMethods = new Set(validRequestMethodsArr);\nvar redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nvar redirectPreserveMethodStatusCodes = new Set([307, 308]);\nvar IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nvar IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nvar IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nvar ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nvar defaultMapRouteProperties = function defaultMapRouteProperties(route) {\n  return {\n    hasErrorBoundary: Boolean(route.hasErrorBoundary)\n  };\n};\nvar TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a router and listen to history POP navigations\n */\nfunction createRouter(init) {\n  var _navigate, _startNavigation, _handleAction, _handleLoaders, _handleFetcherAction, _handleFetcherLoader, _startRedirectNavigation, _callDataStrategy, _callLoadersAndMaybeResolveData, _discoverRoutes;\n  var routerWindow = init.window ? init.window : typeof window !== \"undefined\" ? window : undefined;\n  var isBrowser = typeof routerWindow !== \"undefined\" && typeof routerWindow.document !== \"undefined\" && typeof routerWindow.document.createElement !== \"undefined\";\n  var isServer = !isBrowser;\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  var mapRouteProperties;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    var detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = function mapRouteProperties(route) {\n      return {\n        hasErrorBoundary: detectErrorBoundary(route)\n      };\n    };\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Routes keyed by ID\n  var manifest = {};\n  // Routes in tree format for matching\n  var dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, undefined, manifest);\n  var inFlightDataRoutes;\n  var basename = init.basename || \"/\";\n  var dataStrategyImpl = init.unstable_dataStrategy || defaultDataStrategy;\n  var patchRoutesOnNavigationImpl = init.unstable_patchRoutesOnNavigation;\n  // Config driven behavior flags\n  var future = _extends({\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false,\n    v7_skipActionErrorRevalidation: false\n  }, init.future);\n  // Cleanup function for history\n  var unlistenHistory = null;\n  // Externally-provided functions to call on all state changes\n  var subscribers = new Set();\n  // FIFO queue of previously discovered routes to prevent re-calling on\n  // subsequent navigations to the same path\n  var discoveredRoutesMaxSize = 1000;\n  var discoveredRoutes = new Set();\n  // Externally-provided object to hold scroll restoration locations during routing\n  var savedScrollPositions = null;\n  // Externally-provided function to get scroll restoration keys\n  var getScrollRestorationKey = null;\n  // Externally-provided function to get current scroll position\n  var getScrollPosition = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  var initialScrollRestored = init.hydrationData != null;\n  var initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  var initialErrors = null;\n  if (initialMatches == null && !patchRoutesOnNavigationImpl) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    var error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    var _getShortCircuitMatch = getShortCircuitMatches(dataRoutes),\n      matches = _getShortCircuitMatch.matches,\n      route = _getShortCircuitMatch.route;\n    initialMatches = matches;\n    initialErrors = _defineProperty({}, route.id, error);\n  }\n  // In SPA apps, if the user provided a patchRoutesOnNavigation implementation and\n  // our initial match is a splat route, clear them out so we run through lazy\n  // discovery on hydration in case there's a more accurate lazy route match.\n  // In SSR apps (with `hydrationData`), we expect that the server will send\n  // up the proper matched routes so we don't want to run lazy discovery on\n  // initial hydration and want to hydrate into the splat route.\n  if (initialMatches && !init.hydrationData) {\n    var fogOfWar = checkFogOfWar(initialMatches, dataRoutes, init.history.location.pathname);\n    if (fogOfWar.active) {\n      initialMatches = null;\n    }\n  }\n  var initialized;\n  if (!initialMatches) {\n    initialized = false;\n    initialMatches = [];\n    // If partial hydration and fog of war is enabled, we will be running\n    // `patchRoutesOnNavigation` during hydration so include any partial matches as\n    // the initial matches so we can properly render `HydrateFallback`'s\n    if (future.v7_partialHydration) {\n      var _fogOfWar = checkFogOfWar(null, dataRoutes, init.history.location.pathname);\n      if (_fogOfWar.active && _fogOfWar.matches) {\n        initialMatches = _fogOfWar.matches;\n      }\n    }\n  } else if (initialMatches.some(function (m) {\n    return m.route.lazy;\n  })) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!initialMatches.some(function (m) {\n    return m.route.loader;\n  })) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    var loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    var errors = init.hydrationData ? init.hydrationData.errors : null;\n    var isRouteInitialized = function isRouteInitialized(m) {\n      // No loader, nothing to initialize\n      if (!m.route.loader) {\n        return true;\n      }\n      // Explicitly opting-in to running on hydration\n      if (typeof m.route.loader === \"function\" && m.route.loader.hydrate === true) {\n        return false;\n      }\n      // Otherwise, initialized if hydrated with data or an error\n      return loaderData && loaderData[m.route.id] !== undefined || errors && errors[m.route.id] !== undefined;\n    };\n    // If errors exist, don't consider routes below the boundary\n    if (errors) {\n      var idx = initialMatches.findIndex(function (m) {\n        return errors[m.route.id] !== undefined;\n      });\n      initialized = initialMatches.slice(0, idx + 1).every(isRouteInitialized);\n    } else {\n      initialized = initialMatches.every(isRouteInitialized);\n    }\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n  var router;\n  var state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized: initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  };\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  var pendingAction = Action.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  var pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  var pendingNavigationController;\n  // Should the current navigation enable document.startViewTransition?\n  var pendingViewTransitionEnabled = false;\n  // Store applied view transitions so we can apply them on POP\n  var appliedViewTransitions = new Map();\n  // Cleanup function for persisting applied transitions to sessionStorage\n  var removePageHideEventListener = null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  var isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  var isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  var cancelledDeferredRoutes = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  var cancelledFetcherLoads = new Set();\n  // AbortControllers for any in-flight fetchers\n  var fetchControllers = new Map();\n  // Track loads based on the order in which they started\n  var incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  var pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  var fetchReloadIds = new Map();\n  // Fetchers that triggered redirect navigations\n  var fetchRedirectIds = new Set();\n  // Most recent href/match for fetcher.load calls for fetchers\n  var fetchLoadMatches = new Map();\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  var activeFetchers = new Map();\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  var deletedFetchers = new Set();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  var activeDeferreds = new Map();\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  var blockerFunctions = new Map();\n  // Map of pending patchRoutesOnNavigation() promises (keyed by path/matches) so\n  // that we only kick them off once for a given combo\n  var pendingPatchRoutes = new Map();\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  var ignoreNextHistoryUpdate = false;\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(function (_ref) {\n      var historyAction = _ref.action,\n        location = _ref.location,\n        delta = _ref.delta;\n      // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n      if (ignoreNextHistoryUpdate) {\n        ignoreNextHistoryUpdate = false;\n        return;\n      }\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      var blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction: historyAction\n      });\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        ignoreNextHistoryUpdate = true;\n        init.history.go(delta * -1);\n        // Put the blocker into a blocked state\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location: location,\n          proceed: function proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location: location\n            });\n            // Re-do the same POP navigation we just blocked\n            init.history.go(delta);\n          },\n          reset: function reset() {\n            var blockers = new Map(state.blockers);\n            blockers.set(blockerKey, IDLE_BLOCKER);\n            updateState({\n              blockers: blockers\n            });\n          }\n        });\n        return;\n      }\n      return startNavigation(historyAction, location);\n    });\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      var _saveAppliedTransitions = function _saveAppliedTransitions() {\n        return persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      };\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = function removePageHideEventListener() {\n        return routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n      };\n    }\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location, {\n        initialHydration: true\n      });\n    }\n    return router;\n  }\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach(function (_, key) {\n      return deleteFetcher(key);\n    });\n    state.blockers.forEach(function (_, key) {\n      return deleteBlocker(key);\n    });\n  }\n  // Subscribe to state updates for the router\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return function () {\n      return subscribers.delete(fn);\n    };\n  }\n  // Update our state and notify the calling context of the change\n  function updateState(newState, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    state = _extends({}, state, newState);\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    var completedFetchers = [];\n    var deletedFetchersKeys = [];\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach(function (fetcher, key) {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    _toConsumableArray(subscribers).forEach(function (subscriber) {\n      return subscriber(state, {\n        deletedFetchers: deletedFetchersKeys,\n        unstable_viewTransitionOpts: opts.viewTransitionOpts,\n        unstable_flushSync: opts.flushSync === true\n      });\n    });\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach(function (key) {\n        return state.fetchers.delete(key);\n      });\n      deletedFetchersKeys.forEach(function (key) {\n        return deleteFetcher(key);\n      });\n    }\n  }\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(location, newState, _temp) {\n    var _location$state, _location$state2;\n    var _ref9 = _temp === void 0 ? {} : _temp,\n      flushSync = _ref9.flushSync;\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    var isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    var actionData;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n    // Always preserve any existing loaderData from re-used routes\n    var loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    var blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach(function (_, k) {\n        return blockers.set(k, IDLE_BLOCKER);\n      });\n    }\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    var preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n    // Commit any in-flight routes at the end of the HMR revalidation \"navigation\"\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n    if (isUninterruptedRevalidation) ;else if (pendingAction === Action.Pop) ;else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    }\n    var viewTransitionOpts;\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === Action.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      var priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      var toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location\n      };\n    }\n    updateState(_extends({}, newState, {\n      actionData: actionData,\n      loaderData: loaderData,\n      historyAction: pendingAction,\n      location: location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: preventScrollReset,\n      blockers: blockers\n    }), {\n      viewTransitionOpts: viewTransitionOpts,\n      flushSync: flushSync === true\n    });\n    // Reset stateful navigation vars\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n  }\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  function navigate(_x2, _x3) {\n    return (_navigate = _navigate || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(to, opts) {\n      var normalizedPath, _normalizeNavigateOpt, path, submission, error, currentLocation, nextLocation, userReplace, historyAction, preventScrollReset, flushSync, blockerKey;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(typeof to === \"number\")) {\n              _context2.next = 3;\n              break;\n            }\n            init.history.go(to);\n            return _context2.abrupt(\"return\");\n          case 3:\n            normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, future.v7_relativeSplatPath, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);\n            _normalizeNavigateOpt = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts), path = _normalizeNavigateOpt.path, submission = _normalizeNavigateOpt.submission, error = _normalizeNavigateOpt.error;\n            currentLocation = state.location;\n            nextLocation = createLocation(state.location, path, opts && opts.state); // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n            // URL from window.location, so we need to encode it here so the behavior\n            // remains the same as POP and non-data-router usages.  new URL() does all\n            // the same encoding we'd get from a history.pushState/window.location read\n            // without having to touch history\n            nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n            userReplace = opts && opts.replace != null ? opts.replace : undefined;\n            historyAction = Action.Push;\n            if (userReplace === true) {\n              historyAction = Action.Replace;\n            } else if (userReplace === false) ;else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n              // By default on submissions to the current location we REPLACE so that\n              // users don't have to double-click the back button to get to the prior\n              // location.  If the user redirects to a different location from the\n              // action/loader this will be ignored and the redirect will be a PUSH\n              historyAction = Action.Replace;\n            }\n            preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n            flushSync = (opts && opts.unstable_flushSync) === true;\n            blockerKey = shouldBlockNavigation({\n              currentLocation: currentLocation,\n              nextLocation: nextLocation,\n              historyAction: historyAction\n            });\n            if (!blockerKey) {\n              _context2.next = 17;\n              break;\n            }\n            // Put the blocker into a blocked state\n            updateBlocker(blockerKey, {\n              state: \"blocked\",\n              location: nextLocation,\n              proceed: function proceed() {\n                updateBlocker(blockerKey, {\n                  state: \"proceeding\",\n                  proceed: undefined,\n                  reset: undefined,\n                  location: nextLocation\n                });\n                // Send the same navigation through\n                navigate(to, opts);\n              },\n              reset: function reset() {\n                var blockers = new Map(state.blockers);\n                blockers.set(blockerKey, IDLE_BLOCKER);\n                updateState({\n                  blockers: blockers\n                });\n              }\n            });\n            return _context2.abrupt(\"return\");\n          case 17:\n            _context2.next = 19;\n            return startNavigation(historyAction, nextLocation, {\n              submission: submission,\n              // Send through the formData serialization error if we have one so we can\n              // render at the right error boundary after we match routes\n              pendingError: error,\n              preventScrollReset: preventScrollReset,\n              replace: opts && opts.replace,\n              enableViewTransition: opts && opts.unstable_viewTransition,\n              flushSync: flushSync\n            });\n          case 19:\n            return _context2.abrupt(\"return\", _context2.sent);\n          case 20:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }))).apply(this, arguments);\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    });\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    }\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  }\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  function startNavigation(_x4, _x5, _x6) {\n    return (_startNavigation = _startNavigation || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(historyAction, location, opts) {\n      var routesToUse, loadingNavigation, matches, flushSync, fogOfWar, _handleNavigational, _error, notFoundMatches, _route, request, pendingActionResult, actionResult, _actionResult$pending, routeId, result, _yield$handleLoaders, shortCircuited, updatedMatches, loaderData, errors;\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            // Abort any in-progress navigations and start a new one. Unset any ongoing\n            // uninterrupted revalidations unless told otherwise, since we want this\n            // new navigation to update history normally\n            pendingNavigationController && pendingNavigationController.abort();\n            pendingNavigationController = null;\n            pendingAction = historyAction;\n            isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true;\n            // Save the current scroll position every time we start a new navigation,\n            // and track whether we should reset scroll on completion\n            saveScrollPosition(state.location, state.matches);\n            pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n            pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n            routesToUse = inFlightDataRoutes || dataRoutes;\n            loadingNavigation = opts && opts.overrideNavigation;\n            matches = matchRoutes(routesToUse, location, basename);\n            flushSync = (opts && opts.flushSync) === true;\n            fogOfWar = checkFogOfWar(matches, routesToUse, location.pathname);\n            if (fogOfWar.active && fogOfWar.matches) {\n              matches = fogOfWar.matches;\n            }\n            // Short circuit with a 404 on the root error boundary if we match nothing\n            if (matches) {\n              _context3.next = 17;\n              break;\n            }\n            _handleNavigational = handleNavigational404(location.pathname), _error = _handleNavigational.error, notFoundMatches = _handleNavigational.notFoundMatches, _route = _handleNavigational.route;\n            completeNavigation(location, {\n              matches: notFoundMatches,\n              loaderData: {},\n              errors: _defineProperty({}, _route.id, _error)\n            }, {\n              flushSync: flushSync\n            });\n            return _context3.abrupt(\"return\");\n          case 17:\n            if (!(state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod)))) {\n              _context3.next = 20;\n              break;\n            }\n            completeNavigation(location, {\n              matches: matches\n            }, {\n              flushSync: flushSync\n            });\n            return _context3.abrupt(\"return\");\n          case 20:\n            // Create a controller/Request for this navigation\n            pendingNavigationController = new AbortController();\n            request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n            if (!(opts && opts.pendingError)) {\n              _context3.next = 26;\n              break;\n            }\n            // If we have a pendingError, it means the user attempted a GET submission\n            // with binary FormData so assign here and skip to handleLoaders.  That\n            // way we handle calling loaders above the boundary etc.  It's not really\n            // different from an actionError in that sense.\n            pendingActionResult = [findNearestBoundary(matches).route.id, {\n              type: ResultType.error,\n              error: opts.pendingError\n            }];\n            _context3.next = 44;\n            break;\n          case 26:\n            if (!(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n              _context3.next = 44;\n              break;\n            }\n            _context3.next = 29;\n            return handleAction(request, location, opts.submission, matches, fogOfWar.active, {\n              replace: opts.replace,\n              flushSync: flushSync\n            });\n          case 29:\n            actionResult = _context3.sent;\n            if (!actionResult.shortCircuited) {\n              _context3.next = 32;\n              break;\n            }\n            return _context3.abrupt(\"return\");\n          case 32:\n            if (!actionResult.pendingActionResult) {\n              _context3.next = 38;\n              break;\n            }\n            _actionResult$pending = _slicedToArray(actionResult.pendingActionResult, 2), routeId = _actionResult$pending[0], result = _actionResult$pending[1];\n            if (!(isErrorResult(result) && isRouteErrorResponse(result.error) && result.error.status === 404)) {\n              _context3.next = 38;\n              break;\n            }\n            pendingNavigationController = null;\n            completeNavigation(location, {\n              matches: actionResult.matches,\n              loaderData: {},\n              errors: _defineProperty({}, routeId, result.error)\n            });\n            return _context3.abrupt(\"return\");\n          case 38:\n            matches = actionResult.matches || matches;\n            pendingActionResult = actionResult.pendingActionResult;\n            loadingNavigation = getLoadingNavigation(location, opts.submission);\n            flushSync = false;\n            // No need to do fog of war matching again on loader execution\n            fogOfWar.active = false;\n            // Create a GET request for the loaders\n            request = createClientSideRequest(init.history, request.url, request.signal);\n          case 44:\n            _context3.next = 46;\n            return handleLoaders(request, location, matches, fogOfWar.active, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, opts && opts.initialHydration === true, flushSync, pendingActionResult);\n          case 46:\n            _yield$handleLoaders = _context3.sent;\n            shortCircuited = _yield$handleLoaders.shortCircuited;\n            updatedMatches = _yield$handleLoaders.matches;\n            loaderData = _yield$handleLoaders.loaderData;\n            errors = _yield$handleLoaders.errors;\n            if (!shortCircuited) {\n              _context3.next = 53;\n              break;\n            }\n            return _context3.abrupt(\"return\");\n          case 53:\n            // Clean up now that the action/loaders have completed.  Don't clean up if\n            // we short circuited because pendingNavigationController will have already\n            // been assigned to a new controller for the next navigation\n            pendingNavigationController = null;\n            completeNavigation(location, _extends({\n              matches: updatedMatches || matches\n            }, getActionDataForCommit(pendingActionResult), {\n              loaderData: loaderData,\n              errors: errors\n            }));\n          case 55:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3);\n    }))).apply(this, arguments);\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  function handleAction(_x7, _x8, _x9, _x10, _x11, _x12) {\n    return (_handleAction = _handleAction || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(request, location, submission, matches, isFogOfWar, opts) {\n      var navigation, discoverResult, _handleDiscoverRouteE, boundaryId, _error2, _handleNavigational2, notFoundMatches, _error3, _route2, result, actionMatch, results, _replace, _location, boundaryMatch;\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            if (opts === void 0) {\n              opts = {};\n            }\n            interruptActiveLoads();\n            // Put us in a submitting state\n            navigation = getSubmittingNavigation(location, submission);\n            updateState({\n              navigation: navigation\n            }, {\n              flushSync: opts.flushSync === true\n            });\n            if (!isFogOfWar) {\n              _context4.next = 23;\n              break;\n            }\n            _context4.next = 7;\n            return discoverRoutes(matches, location.pathname, request.signal);\n          case 7:\n            discoverResult = _context4.sent;\n            if (!(discoverResult.type === \"aborted\")) {\n              _context4.next = 12;\n              break;\n            }\n            return _context4.abrupt(\"return\", {\n              shortCircuited: true\n            });\n          case 12:\n            if (!(discoverResult.type === \"error\")) {\n              _context4.next = 17;\n              break;\n            }\n            _handleDiscoverRouteE = handleDiscoverRouteError(location.pathname, discoverResult), boundaryId = _handleDiscoverRouteE.boundaryId, _error2 = _handleDiscoverRouteE.error;\n            return _context4.abrupt(\"return\", {\n              matches: discoverResult.partialMatches,\n              pendingActionResult: [boundaryId, {\n                type: ResultType.error,\n                error: _error2\n              }]\n            });\n          case 17:\n            if (discoverResult.matches) {\n              _context4.next = 22;\n              break;\n            }\n            _handleNavigational2 = handleNavigational404(location.pathname), notFoundMatches = _handleNavigational2.notFoundMatches, _error3 = _handleNavigational2.error, _route2 = _handleNavigational2.route;\n            return _context4.abrupt(\"return\", {\n              matches: notFoundMatches,\n              pendingActionResult: [_route2.id, {\n                type: ResultType.error,\n                error: _error3\n              }]\n            });\n          case 22:\n            matches = discoverResult.matches;\n          case 23:\n            actionMatch = getTargetMatch(matches, location);\n            if (!(!actionMatch.route.action && !actionMatch.route.lazy)) {\n              _context4.next = 28;\n              break;\n            }\n            result = {\n              type: ResultType.error,\n              error: getInternalRouterError(405, {\n                method: request.method,\n                pathname: location.pathname,\n                routeId: actionMatch.route.id\n              })\n            };\n            _context4.next = 34;\n            break;\n          case 28:\n            _context4.next = 30;\n            return callDataStrategy(\"action\", request, [actionMatch], matches);\n          case 30:\n            results = _context4.sent;\n            result = results[0];\n            if (!request.signal.aborted) {\n              _context4.next = 34;\n              break;\n            }\n            return _context4.abrupt(\"return\", {\n              shortCircuited: true\n            });\n          case 34:\n            if (!isRedirectResult(result)) {\n              _context4.next = 39;\n              break;\n            }\n            if (opts && opts.replace != null) {\n              _replace = opts.replace;\n            } else {\n              // If the user didn't explicity indicate replace behavior, replace if\n              // we redirected to the exact same location we're currently at to avoid\n              // double back-buttons\n              _location = normalizeRedirectLocation(result.response.headers.get(\"Location\"), new URL(request.url), basename);\n              _replace = _location === state.location.pathname + state.location.search;\n            }\n            _context4.next = 38;\n            return startRedirectNavigation(request, result, {\n              submission: submission,\n              replace: _replace\n            });\n          case 38:\n            return _context4.abrupt(\"return\", {\n              shortCircuited: true\n            });\n          case 39:\n            if (!isDeferredResult(result)) {\n              _context4.next = 41;\n              break;\n            }\n            throw getInternalRouterError(400, {\n              type: \"defer-action\"\n            });\n          case 41:\n            if (!isErrorResult(result)) {\n              _context4.next = 45;\n              break;\n            }\n            // Store off the pending error - we use it to determine which loaders\n            // to call and will commit it when we complete the navigation\n            boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions to the current location are REPLACE\n            // navigations, but if the action threw an error that'll be rendered in\n            // an errorElement, we fall back to PUSH so that the user can use the\n            // back button to get back to the pre-submission form location to try\n            // again\n            if ((opts && opts.replace) !== true) {\n              pendingAction = Action.Push;\n            }\n            return _context4.abrupt(\"return\", {\n              matches: matches,\n              pendingActionResult: [boundaryMatch.route.id, result]\n            });\n          case 45:\n            return _context4.abrupt(\"return\", {\n              matches: matches,\n              pendingActionResult: [actionMatch.route.id, result]\n            });\n          case 46:\n          case \"end\":\n            return _context4.stop();\n        }\n      }, _callee4);\n    }))).apply(this, arguments);\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  function handleLoaders(_x13, _x14, _x15, _x16, _x17, _x18, _x19, _x20, _x21, _x22, _x23) {\n    return (_handleLoaders = _handleLoaders || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(request, location, matches, isFogOfWar, overrideNavigation, submission, fetcherSubmission, replace, initialHydration, flushSync, pendingActionResult) {\n      var loadingNavigation, activeSubmission, shouldUpdateNavigationState, actionData, discoverResult, _handleDiscoverRouteE2, boundaryId, _error4, _handleNavigational3, _error5, notFoundMatches, _route3, routesToUse, _getMatchesToLoad, _getMatchesToLoad2, matchesToLoad, revalidatingFetchers, _updatedFetchers, updates, _actionData, abortPendingFetchRevalidations, _yield$callLoadersAnd, loaderResults, fetcherResults, redirect, fetcherKey, _processLoaderData, loaderData, errors, updatedFetchers, didAbortFetchLoads, shouldUpdateFetchers;\n      return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) switch (_context5.prev = _context5.next) {\n          case 0:\n            // Figure out the right navigation we want to use for data loading\n            loadingNavigation = overrideNavigation || getLoadingNavigation(location, submission); // If this was a redirect from an action we don't have a \"submission\" but\n            // we have it on the loading navigation so use that if available\n            activeSubmission = submission || fetcherSubmission || getSubmissionFromNavigation(loadingNavigation); // If this is an uninterrupted revalidation, we remain in our current idle\n            // state.  If not, we need to switch to our loading state and load data,\n            // preserving any new action data or existing action data (in the case of\n            // a revalidation interrupting an actionReload)\n            // If we have partialHydration enabled, then don't update the state for the\n            // initial data load since it's not a \"navigation\"\n            shouldUpdateNavigationState = !isUninterruptedRevalidation && (!future.v7_partialHydration || !initialHydration); // When fog of war is enabled, we enter our `loading` state earlier so we\n            // can discover new routes during the `loading` state.  We skip this if\n            // we've already run actions since we would have done our matching already.\n            // If the children() function threw then, we want to proceed with the\n            // partial matches it discovered.\n            if (!isFogOfWar) {\n              _context5.next = 23;\n              break;\n            }\n            if (shouldUpdateNavigationState) {\n              actionData = getUpdatedActionData(pendingActionResult);\n              updateState(_extends({\n                navigation: loadingNavigation\n              }, actionData !== undefined ? {\n                actionData: actionData\n              } : {}), {\n                flushSync: flushSync\n              });\n            }\n            _context5.next = 7;\n            return discoverRoutes(matches, location.pathname, request.signal);\n          case 7:\n            discoverResult = _context5.sent;\n            if (!(discoverResult.type === \"aborted\")) {\n              _context5.next = 12;\n              break;\n            }\n            return _context5.abrupt(\"return\", {\n              shortCircuited: true\n            });\n          case 12:\n            if (!(discoverResult.type === \"error\")) {\n              _context5.next = 17;\n              break;\n            }\n            _handleDiscoverRouteE2 = handleDiscoverRouteError(location.pathname, discoverResult), boundaryId = _handleDiscoverRouteE2.boundaryId, _error4 = _handleDiscoverRouteE2.error;\n            return _context5.abrupt(\"return\", {\n              matches: discoverResult.partialMatches,\n              loaderData: {},\n              errors: _defineProperty({}, boundaryId, _error4)\n            });\n          case 17:\n            if (discoverResult.matches) {\n              _context5.next = 22;\n              break;\n            }\n            _handleNavigational3 = handleNavigational404(location.pathname), _error5 = _handleNavigational3.error, notFoundMatches = _handleNavigational3.notFoundMatches, _route3 = _handleNavigational3.route;\n            return _context5.abrupt(\"return\", {\n              matches: notFoundMatches,\n              loaderData: {},\n              errors: _defineProperty({}, _route3.id, _error5)\n            });\n          case 22:\n            matches = discoverResult.matches;\n          case 23:\n            routesToUse = inFlightDataRoutes || dataRoutes;\n            _getMatchesToLoad = getMatchesToLoad(init.history, state, matches, activeSubmission, location, future.v7_partialHydration && initialHydration === true, future.v7_skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionResult), _getMatchesToLoad2 = _slicedToArray(_getMatchesToLoad, 2), matchesToLoad = _getMatchesToLoad2[0], revalidatingFetchers = _getMatchesToLoad2[1]; // Cancel pending deferreds for no-longer-matched routes or routes we're\n            // about to reload.  Note that if this is an action reload we would have\n            // already cancelled all pending deferreds so this would be a no-op\n            cancelActiveDeferreds(function (routeId) {\n              return !(matches && matches.some(function (m) {\n                return m.route.id === routeId;\n              })) || matchesToLoad && matchesToLoad.some(function (m) {\n                return m.route.id === routeId;\n              });\n            });\n            pendingNavigationLoadId = ++incrementingLoadId;\n            // Short circuit if we have no loaders to run\n            if (!(matchesToLoad.length === 0 && revalidatingFetchers.length === 0)) {\n              _context5.next = 31;\n              break;\n            }\n            _updatedFetchers = markFetchRedirectsDone();\n            completeNavigation(location, _extends({\n              matches: matches,\n              loaderData: {},\n              // Commit pending error if we're short circuiting\n              errors: pendingActionResult && isErrorResult(pendingActionResult[1]) ? _defineProperty({}, pendingActionResult[0], pendingActionResult[1].error) : null\n            }, getActionDataForCommit(pendingActionResult), _updatedFetchers ? {\n              fetchers: new Map(state.fetchers)\n            } : {}), {\n              flushSync: flushSync\n            });\n            return _context5.abrupt(\"return\", {\n              shortCircuited: true\n            });\n          case 31:\n            if (shouldUpdateNavigationState) {\n              updates = {};\n              if (!isFogOfWar) {\n                // Only update navigation/actionNData if we didn't already do it above\n                updates.navigation = loadingNavigation;\n                _actionData = getUpdatedActionData(pendingActionResult);\n                if (_actionData !== undefined) {\n                  updates.actionData = _actionData;\n                }\n              }\n              if (revalidatingFetchers.length > 0) {\n                updates.fetchers = getUpdatedRevalidatingFetchers(revalidatingFetchers);\n              }\n              updateState(updates, {\n                flushSync: flushSync\n              });\n            }\n            revalidatingFetchers.forEach(function (rf) {\n              if (fetchControllers.has(rf.key)) {\n                abortFetcher(rf.key);\n              }\n              if (rf.controller) {\n                // Fetchers use an independent AbortController so that aborting a fetcher\n                // (via deleteFetcher) does not abort the triggering navigation that\n                // triggered the revalidation\n                fetchControllers.set(rf.key, rf.controller);\n              }\n            });\n            // Proxy navigation abort through to revalidation fetchers\n            abortPendingFetchRevalidations = function abortPendingFetchRevalidations() {\n              return revalidatingFetchers.forEach(function (f) {\n                return abortFetcher(f.key);\n              });\n            };\n            if (pendingNavigationController) {\n              pendingNavigationController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n            }\n            _context5.next = 37;\n            return callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n          case 37:\n            _yield$callLoadersAnd = _context5.sent;\n            loaderResults = _yield$callLoadersAnd.loaderResults;\n            fetcherResults = _yield$callLoadersAnd.fetcherResults;\n            if (!request.signal.aborted) {\n              _context5.next = 42;\n              break;\n            }\n            return _context5.abrupt(\"return\", {\n              shortCircuited: true\n            });\n          case 42:\n            // Clean up _after_ loaders have completed.  Don't clean up if we short\n            // circuited because fetchControllers would have been aborted and\n            // reassigned to new controllers for the next navigation\n            if (pendingNavigationController) {\n              pendingNavigationController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n            }\n            revalidatingFetchers.forEach(function (rf) {\n              return fetchControllers.delete(rf.key);\n            });\n            // If any loaders returned a redirect Response, start a new REPLACE navigation\n            redirect = findRedirect([].concat(_toConsumableArray(loaderResults), _toConsumableArray(fetcherResults)));\n            if (!redirect) {\n              _context5.next = 50;\n              break;\n            }\n            if (redirect.idx >= matchesToLoad.length) {\n              // If this redirect came from a fetcher make sure we mark it in\n              // fetchRedirectIds so it doesn't get revalidated on the next set of\n              // loader executions\n              fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n              fetchRedirectIds.add(fetcherKey);\n            }\n            _context5.next = 49;\n            return startRedirectNavigation(request, redirect.result, {\n              replace: replace\n            });\n          case 49:\n            return _context5.abrupt(\"return\", {\n              shortCircuited: true\n            });\n          case 50:\n            // Process and commit output from loaders\n            _processLoaderData = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingActionResult, revalidatingFetchers, fetcherResults, activeDeferreds), loaderData = _processLoaderData.loaderData, errors = _processLoaderData.errors; // Wire up subscribers to update loaderData as promises settle\n            activeDeferreds.forEach(function (deferredData, routeId) {\n              deferredData.subscribe(function (aborted) {\n                // Note: No need to updateState here since the TrackedPromise on\n                // loaderData is stable across resolve/reject\n                // Remove this instance if we were aborted or if promises have settled\n                if (aborted || deferredData.done) {\n                  activeDeferreds.delete(routeId);\n                }\n              });\n            });\n            // During partial hydration, preserve SSR errors for routes that don't re-run\n            if (future.v7_partialHydration && initialHydration && state.errors) {\n              Object.entries(state.errors).filter(function (_ref2) {\n                var _ref11 = _slicedToArray(_ref2, 1),\n                  id = _ref11[0];\n                return !matchesToLoad.some(function (m) {\n                  return m.route.id === id;\n                });\n              }).forEach(function (_ref3) {\n                var _ref12 = _slicedToArray(_ref3, 2),\n                  routeId = _ref12[0],\n                  error = _ref12[1];\n                errors = Object.assign(errors || {}, _defineProperty({}, routeId, error));\n              });\n            }\n            updatedFetchers = markFetchRedirectsDone();\n            didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n            shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n            return _context5.abrupt(\"return\", _extends({\n              matches: matches,\n              loaderData: loaderData,\n              errors: errors\n            }, shouldUpdateFetchers ? {\n              fetchers: new Map(state.fetchers)\n            } : {}));\n          case 57:\n          case \"end\":\n            return _context5.stop();\n        }\n      }, _callee5);\n    }))).apply(this, arguments);\n  }\n  function getUpdatedActionData(pendingActionResult) {\n    if (pendingActionResult && !isErrorResult(pendingActionResult[1])) {\n      // This is cast to `any` currently because `RouteData`uses any and it\n      // would be a breaking change to use any.\n      // TODO: v7 - change `RouteData` to use `unknown` instead of `any`\n      return _defineProperty({}, pendingActionResult[0], pendingActionResult[1].data);\n    } else if (state.actionData) {\n      if (Object.keys(state.actionData).length === 0) {\n        return null;\n      } else {\n        return state.actionData;\n      }\n    }\n  }\n  function getUpdatedRevalidatingFetchers(revalidatingFetchers) {\n    revalidatingFetchers.forEach(function (rf) {\n      var fetcher = state.fetchers.get(rf.key);\n      var revalidatingFetcher = getLoadingFetcher(undefined, fetcher ? fetcher.data : undefined);\n      state.fetchers.set(rf.key, revalidatingFetcher);\n    });\n    return new Map(state.fetchers);\n  }\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n    if (fetchControllers.has(key)) abortFetcher(key);\n    var flushSync = (opts && opts.unstable_flushSync) === true;\n    var routesToUse = inFlightDataRoutes || dataRoutes;\n    var normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, future.v7_relativeSplatPath, routeId, opts == null ? void 0 : opts.relative);\n    var matches = matchRoutes(routesToUse, normalizedPath, basename);\n    var fogOfWar = checkFogOfWar(matches, routesToUse, normalizedPath);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: normalizedPath\n      }), {\n        flushSync: flushSync\n      });\n      return;\n    }\n    var _normalizeNavigateOpt2 = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts),\n      path = _normalizeNavigateOpt2.path,\n      submission = _normalizeNavigateOpt2.submission,\n      error = _normalizeNavigateOpt2.error;\n    if (error) {\n      setFetcherError(key, routeId, error, {\n        flushSync: flushSync\n      });\n      return;\n    }\n    var match = getTargetMatch(matches, path);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, fogOfWar.active, flushSync, submission);\n      return;\n    }\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, {\n      routeId: routeId,\n      path: path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, fogOfWar.active, flushSync, submission);\n  }\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  function handleFetcherAction(_x24, _x25, _x26, _x27, _x28, _x29, _x30, _x31) {\n    return (_handleFetcherAction = _handleFetcherAction || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(key, routeId, path, match, requestMatches, isFogOfWar, flushSync, submission) {\n      var detectAndHandle405Error, existingFetcher, abortController, fetchRequest, discoverResult, _handleDiscoverRouteE3, _error7, originatingLoadId, actionResults, actionResult, nextLocation, revalidationRequest, routesToUse, matches, loadId, loadFetcher, _getMatchesToLoad3, _getMatchesToLoad4, matchesToLoad, revalidatingFetchers, abortPendingFetchRevalidations, _yield$callLoadersAnd2, loaderResults, fetcherResults, redirect, fetcherKey, _processLoaderData2, loaderData, errors, doneFetcher;\n      return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n        while (1) switch (_context6.prev = _context6.next) {\n          case 0:\n            detectAndHandle405Error = function _detectAndHandle405Er(m) {\n              if (!m.route.action && !m.route.lazy) {\n                var _error6 = getInternalRouterError(405, {\n                  method: submission.formMethod,\n                  pathname: path,\n                  routeId: routeId\n                });\n                setFetcherError(key, routeId, _error6, {\n                  flushSync: flushSync\n                });\n                return true;\n              }\n              return false;\n            };\n            interruptActiveLoads();\n            fetchLoadMatches.delete(key);\n            if (!(!isFogOfWar && detectAndHandle405Error(match))) {\n              _context6.next = 5;\n              break;\n            }\n            return _context6.abrupt(\"return\");\n          case 5:\n            // Put this fetcher into it's submitting state\n            existingFetcher = state.fetchers.get(key);\n            updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n              flushSync: flushSync\n            });\n            abortController = new AbortController();\n            fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n            if (!isFogOfWar) {\n              _context6.next = 32;\n              break;\n            }\n            _context6.next = 12;\n            return discoverRoutes(requestMatches, path, fetchRequest.signal);\n          case 12:\n            discoverResult = _context6.sent;\n            if (!(discoverResult.type === \"aborted\")) {\n              _context6.next = 17;\n              break;\n            }\n            return _context6.abrupt(\"return\");\n          case 17:\n            if (!(discoverResult.type === \"error\")) {\n              _context6.next = 23;\n              break;\n            }\n            _handleDiscoverRouteE3 = handleDiscoverRouteError(path, discoverResult), _error7 = _handleDiscoverRouteE3.error;\n            setFetcherError(key, routeId, _error7, {\n              flushSync: flushSync\n            });\n            return _context6.abrupt(\"return\");\n          case 23:\n            if (discoverResult.matches) {\n              _context6.next = 28;\n              break;\n            }\n            setFetcherError(key, routeId, getInternalRouterError(404, {\n              pathname: path\n            }), {\n              flushSync: flushSync\n            });\n            return _context6.abrupt(\"return\");\n          case 28:\n            requestMatches = discoverResult.matches;\n            match = getTargetMatch(requestMatches, path);\n            if (!detectAndHandle405Error(match)) {\n              _context6.next = 32;\n              break;\n            }\n            return _context6.abrupt(\"return\");\n          case 32:\n            // Call the action for the fetcher\n            fetchControllers.set(key, abortController);\n            originatingLoadId = incrementingLoadId;\n            _context6.next = 36;\n            return callDataStrategy(\"action\", fetchRequest, [match], requestMatches);\n          case 36:\n            actionResults = _context6.sent;\n            actionResult = actionResults[0];\n            if (!fetchRequest.signal.aborted) {\n              _context6.next = 41;\n              break;\n            }\n            // We can delete this so long as we weren't aborted by our own fetcher\n            // re-submit which would have put _new_ controller is in fetchControllers\n            if (fetchControllers.get(key) === abortController) {\n              fetchControllers.delete(key);\n            }\n            return _context6.abrupt(\"return\");\n          case 41:\n            if (!(future.v7_fetcherPersist && deletedFetchers.has(key))) {\n              _context6.next = 47;\n              break;\n            }\n            if (!(isRedirectResult(actionResult) || isErrorResult(actionResult))) {\n              _context6.next = 45;\n              break;\n            }\n            updateFetcherState(key, getDoneFetcher(undefined));\n            return _context6.abrupt(\"return\");\n          case 45:\n            _context6.next = 60;\n            break;\n          case 47:\n            if (!isRedirectResult(actionResult)) {\n              _context6.next = 57;\n              break;\n            }\n            fetchControllers.delete(key);\n            if (!(pendingNavigationLoadId > originatingLoadId)) {\n              _context6.next = 54;\n              break;\n            }\n            // A new navigation was kicked off after our action started, so that\n            // should take precedence over this redirect navigation.  We already\n            // set isRevalidationRequired so all loaders for the new route should\n            // fire unless opted out via shouldRevalidate\n            updateFetcherState(key, getDoneFetcher(undefined));\n            return _context6.abrupt(\"return\");\n          case 54:\n            fetchRedirectIds.add(key);\n            updateFetcherState(key, getLoadingFetcher(submission));\n            return _context6.abrupt(\"return\", startRedirectNavigation(fetchRequest, actionResult, {\n              fetcherSubmission: submission\n            }));\n          case 57:\n            if (!isErrorResult(actionResult)) {\n              _context6.next = 60;\n              break;\n            }\n            setFetcherError(key, routeId, actionResult.error);\n            return _context6.abrupt(\"return\");\n          case 60:\n            if (!isDeferredResult(actionResult)) {\n              _context6.next = 62;\n              break;\n            }\n            throw getInternalRouterError(400, {\n              type: \"defer-action\"\n            });\n          case 62:\n            // Start the data load for current matches, or the next location if we're\n            // in the middle of a navigation\n            nextLocation = state.navigation.location || state.location;\n            revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n            routesToUse = inFlightDataRoutes || dataRoutes;\n            matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;\n            invariant(matches, \"Didn't find any matches after fetcher action\");\n            loadId = ++incrementingLoadId;\n            fetchReloadIds.set(key, loadId);\n            loadFetcher = getLoadingFetcher(submission, actionResult.data);\n            state.fetchers.set(key, loadFetcher);\n            _getMatchesToLoad3 = getMatchesToLoad(init.history, state, matches, submission, nextLocation, false, future.v7_skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, [match.route.id, actionResult]), _getMatchesToLoad4 = _slicedToArray(_getMatchesToLoad3, 2), matchesToLoad = _getMatchesToLoad4[0], revalidatingFetchers = _getMatchesToLoad4[1]; // Put all revalidating fetchers into the loading state, except for the\n            // current fetcher which we want to keep in it's current loading state which\n            // contains it's action submission info + action data\n            revalidatingFetchers.filter(function (rf) {\n              return rf.key !== key;\n            }).forEach(function (rf) {\n              var staleKey = rf.key;\n              var existingFetcher = state.fetchers.get(staleKey);\n              var revalidatingFetcher = getLoadingFetcher(undefined, existingFetcher ? existingFetcher.data : undefined);\n              state.fetchers.set(staleKey, revalidatingFetcher);\n              if (fetchControllers.has(staleKey)) {\n                abortFetcher(staleKey);\n              }\n              if (rf.controller) {\n                fetchControllers.set(staleKey, rf.controller);\n              }\n            });\n            updateState({\n              fetchers: new Map(state.fetchers)\n            });\n            abortPendingFetchRevalidations = function abortPendingFetchRevalidations() {\n              return revalidatingFetchers.forEach(function (rf) {\n                return abortFetcher(rf.key);\n              });\n            };\n            abortController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n            _context6.next = 78;\n            return callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n          case 78:\n            _yield$callLoadersAnd2 = _context6.sent;\n            loaderResults = _yield$callLoadersAnd2.loaderResults;\n            fetcherResults = _yield$callLoadersAnd2.fetcherResults;\n            if (!abortController.signal.aborted) {\n              _context6.next = 83;\n              break;\n            }\n            return _context6.abrupt(\"return\");\n          case 83:\n            abortController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n            fetchReloadIds.delete(key);\n            fetchControllers.delete(key);\n            revalidatingFetchers.forEach(function (r) {\n              return fetchControllers.delete(r.key);\n            });\n            redirect = findRedirect([].concat(_toConsumableArray(loaderResults), _toConsumableArray(fetcherResults)));\n            if (!redirect) {\n              _context6.next = 91;\n              break;\n            }\n            if (redirect.idx >= matchesToLoad.length) {\n              // If this redirect came from a fetcher make sure we mark it in\n              // fetchRedirectIds so it doesn't get revalidated on the next set of\n              // loader executions\n              fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n              fetchRedirectIds.add(fetcherKey);\n            }\n            return _context6.abrupt(\"return\", startRedirectNavigation(revalidationRequest, redirect.result));\n          case 91:\n            // Process and commit output from loaders\n            _processLoaderData2 = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds), loaderData = _processLoaderData2.loaderData, errors = _processLoaderData2.errors; // Since we let revalidations complete even if the submitting fetcher was\n            // deleted, only put it back to idle if it hasn't been deleted\n            if (state.fetchers.has(key)) {\n              doneFetcher = getDoneFetcher(actionResult.data);\n              state.fetchers.set(key, doneFetcher);\n            }\n            abortStaleFetchLoads(loadId);\n            // If we are currently in a navigation loading state and this fetcher is\n            // more recent than the navigation, we want the newer data so abort the\n            // navigation and complete it with the fetcher data\n            if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n              invariant(pendingAction, \"Expected pending action\");\n              pendingNavigationController && pendingNavigationController.abort();\n              completeNavigation(state.navigation.location, {\n                matches: matches,\n                loaderData: loaderData,\n                errors: errors,\n                fetchers: new Map(state.fetchers)\n              });\n            } else {\n              // otherwise just update with the fetcher data, preserving any existing\n              // loaderData for loaders that did not need to reload.  We have to\n              // manually merge here since we aren't going through completeNavigation\n              updateState({\n                errors: errors,\n                loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors),\n                fetchers: new Map(state.fetchers)\n              });\n              isRevalidationRequired = false;\n            }\n          case 95:\n          case \"end\":\n            return _context6.stop();\n        }\n      }, _callee6);\n    }))).apply(this, arguments);\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  function handleFetcherLoader(_x32, _x33, _x34, _x35, _x36, _x37, _x38, _x39) {\n    return (_handleFetcherLoader = _handleFetcherLoader || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(key, routeId, path, match, matches, isFogOfWar, flushSync, submission) {\n      var existingFetcher, abortController, fetchRequest, discoverResult, _handleDiscoverRouteE4, _error8, originatingLoadId, results, result;\n      return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n        while (1) switch (_context7.prev = _context7.next) {\n          case 0:\n            existingFetcher = state.fetchers.get(key);\n            updateFetcherState(key, getLoadingFetcher(submission, existingFetcher ? existingFetcher.data : undefined), {\n              flushSync: flushSync\n            });\n            abortController = new AbortController();\n            fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n            if (!isFogOfWar) {\n              _context7.next = 25;\n              break;\n            }\n            _context7.next = 7;\n            return discoverRoutes(matches, path, fetchRequest.signal);\n          case 7:\n            discoverResult = _context7.sent;\n            if (!(discoverResult.type === \"aborted\")) {\n              _context7.next = 12;\n              break;\n            }\n            return _context7.abrupt(\"return\");\n          case 12:\n            if (!(discoverResult.type === \"error\")) {\n              _context7.next = 18;\n              break;\n            }\n            _handleDiscoverRouteE4 = handleDiscoverRouteError(path, discoverResult), _error8 = _handleDiscoverRouteE4.error;\n            setFetcherError(key, routeId, _error8, {\n              flushSync: flushSync\n            });\n            return _context7.abrupt(\"return\");\n          case 18:\n            if (discoverResult.matches) {\n              _context7.next = 23;\n              break;\n            }\n            setFetcherError(key, routeId, getInternalRouterError(404, {\n              pathname: path\n            }), {\n              flushSync: flushSync\n            });\n            return _context7.abrupt(\"return\");\n          case 23:\n            matches = discoverResult.matches;\n            match = getTargetMatch(matches, path);\n          case 25:\n            // Call the loader for this fetcher route match\n            fetchControllers.set(key, abortController);\n            originatingLoadId = incrementingLoadId;\n            _context7.next = 29;\n            return callDataStrategy(\"loader\", fetchRequest, [match], matches);\n          case 29:\n            results = _context7.sent;\n            result = results[0]; // Deferred isn't supported for fetcher loads, await everything and treat it\n            // as a normal load.  resolveDeferredData will return undefined if this\n            // fetcher gets aborted, so we just leave result untouched and short circuit\n            // below if that happens\n            if (!isDeferredResult(result)) {\n              _context7.next = 38;\n              break;\n            }\n            _context7.next = 34;\n            return resolveDeferredData(result, fetchRequest.signal, true);\n          case 34:\n            _context7.t0 = _context7.sent;\n            if (_context7.t0) {\n              _context7.next = 37;\n              break;\n            }\n            _context7.t0 = result;\n          case 37:\n            result = _context7.t0;\n          case 38:\n            // We can delete this so long as we weren't aborted by our our own fetcher\n            // re-load which would have put _new_ controller is in fetchControllers\n            if (fetchControllers.get(key) === abortController) {\n              fetchControllers.delete(key);\n            }\n            if (!fetchRequest.signal.aborted) {\n              _context7.next = 41;\n              break;\n            }\n            return _context7.abrupt(\"return\");\n          case 41:\n            if (!deletedFetchers.has(key)) {\n              _context7.next = 44;\n              break;\n            }\n            updateFetcherState(key, getDoneFetcher(undefined));\n            return _context7.abrupt(\"return\");\n          case 44:\n            if (!isRedirectResult(result)) {\n              _context7.next = 54;\n              break;\n            }\n            if (!(pendingNavigationLoadId > originatingLoadId)) {\n              _context7.next = 50;\n              break;\n            }\n            // A new navigation was kicked off after our loader started, so that\n            // should take precedence over this redirect navigation\n            updateFetcherState(key, getDoneFetcher(undefined));\n            return _context7.abrupt(\"return\");\n          case 50:\n            fetchRedirectIds.add(key);\n            _context7.next = 53;\n            return startRedirectNavigation(fetchRequest, result);\n          case 53:\n            return _context7.abrupt(\"return\");\n          case 54:\n            if (!isErrorResult(result)) {\n              _context7.next = 57;\n              break;\n            }\n            setFetcherError(key, routeId, result.error);\n            return _context7.abrupt(\"return\");\n          case 57:\n            invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n            // Put the fetcher back into an idle state\n            updateFetcherState(key, getDoneFetcher(result.data));\n          case 59:\n          case \"end\":\n            return _context7.stop();\n        }\n      }, _callee7);\n    }))).apply(this, arguments);\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  function startRedirectNavigation(_x40, _x41, _x42) {\n    return (_startRedirectNavigation = _startRedirectNavigation || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(request, redirect, _temp2) {\n      var _ref14, submission, fetcherSubmission, replace, location, redirectLocation, isDocumentReload, url, redirectHistoryAction, _state$navigation, formMethod, formAction, formEncType, activeSubmission, overrideNavigation;\n      return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n        while (1) switch (_context8.prev = _context8.next) {\n          case 0:\n            _ref14 = _temp2 === void 0 ? {} : _temp2, submission = _ref14.submission, fetcherSubmission = _ref14.fetcherSubmission, replace = _ref14.replace;\n            if (redirect.response.headers.has(\"X-Remix-Revalidate\")) {\n              isRevalidationRequired = true;\n            }\n            location = redirect.response.headers.get(\"Location\");\n            invariant(location, \"Expected a Location header on the redirect Response\");\n            location = normalizeRedirectLocation(location, new URL(request.url), basename);\n            redirectLocation = createLocation(state.location, location, {\n              _isRedirect: true\n            });\n            if (!isBrowser) {\n              _context8.next = 12;\n              break;\n            }\n            isDocumentReload = false;\n            if (redirect.response.headers.has(\"X-Remix-Reload-Document\")) {\n              // Hard reload if the response contained X-Remix-Reload-Document\n              isDocumentReload = true;\n            } else if (ABSOLUTE_URL_REGEX.test(location)) {\n              url = init.history.createURL(location);\n              isDocumentReload =\n              // Hard reload if it's an absolute URL to a new origin\n              url.origin !== routerWindow.location.origin ||\n              // Hard reload if it's an absolute URL that does not match our basename\n              stripBasename(url.pathname, basename) == null;\n            }\n            if (!isDocumentReload) {\n              _context8.next = 12;\n              break;\n            }\n            if (replace) {\n              routerWindow.location.replace(location);\n            } else {\n              routerWindow.location.assign(location);\n            }\n            return _context8.abrupt(\"return\");\n          case 12:\n            // There's no need to abort on redirects, since we don't detect the\n            // redirect until the action/loaders have settled\n            pendingNavigationController = null;\n            redirectHistoryAction = replace === true || redirect.response.headers.has(\"X-Remix-Replace\") ? Action.Replace : Action.Push; // Use the incoming submission if provided, fallback on the active one in\n            // state.navigation\n            _state$navigation = state.navigation, formMethod = _state$navigation.formMethod, formAction = _state$navigation.formAction, formEncType = _state$navigation.formEncType;\n            if (!submission && !fetcherSubmission && formMethod && formAction && formEncType) {\n              submission = getSubmissionFromNavigation(state.navigation);\n            }\n            // If this was a 307/308 submission we want to preserve the HTTP method and\n            // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n            // redirected location\n            activeSubmission = submission || fetcherSubmission;\n            if (!(redirectPreserveMethodStatusCodes.has(redirect.response.status) && activeSubmission && isMutationMethod(activeSubmission.formMethod))) {\n              _context8.next = 22;\n              break;\n            }\n            _context8.next = 20;\n            return startNavigation(redirectHistoryAction, redirectLocation, {\n              submission: _extends({}, activeSubmission, {\n                formAction: location\n              }),\n              // Preserve this flag across redirects\n              preventScrollReset: pendingPreventScrollReset\n            });\n          case 20:\n            _context8.next = 25;\n            break;\n          case 22:\n            // If we have a navigation submission, we will preserve it through the\n            // redirect navigation\n            overrideNavigation = getLoadingNavigation(redirectLocation, submission);\n            _context8.next = 25;\n            return startNavigation(redirectHistoryAction, redirectLocation, {\n              overrideNavigation: overrideNavigation,\n              // Send fetcher submissions through for shouldRevalidate\n              fetcherSubmission: fetcherSubmission,\n              // Preserve this flag across redirects\n              preventScrollReset: pendingPreventScrollReset\n            });\n          case 25:\n          case \"end\":\n            return _context8.stop();\n        }\n      }, _callee8);\n    }))).apply(this, arguments);\n  } // Utility wrapper for calling dataStrategy client-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  function callDataStrategy(_x43, _x44, _x45, _x46) {\n    return (_callDataStrategy = _callDataStrategy || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(type, request, matchesToLoad, matches) {\n      var results;\n      return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n        while (1) switch (_context9.prev = _context9.next) {\n          case 0:\n            _context9.prev = 0;\n            _context9.next = 3;\n            return callDataStrategyImpl(dataStrategyImpl, type, request, matchesToLoad, matches, manifest, mapRouteProperties);\n          case 3:\n            results = _context9.sent;\n            _context9.next = 6;\n            return Promise.all(results.map(function (result, i) {\n              if (isRedirectHandlerResult(result)) {\n                var response = result.result;\n                return {\n                  type: ResultType.redirect,\n                  response: normalizeRelativeRoutingRedirectResponse(response, request, matchesToLoad[i].route.id, matches, basename, future.v7_relativeSplatPath)\n                };\n              }\n              return convertHandlerResultToDataResult(result);\n            }));\n          case 6:\n            return _context9.abrupt(\"return\", _context9.sent);\n          case 9:\n            _context9.prev = 9;\n            _context9.t0 = _context9[\"catch\"](0);\n            return _context9.abrupt(\"return\", matchesToLoad.map(function () {\n              return {\n                type: ResultType.error,\n                error: _context9.t0\n              };\n            }));\n          case 12:\n          case \"end\":\n            return _context9.stop();\n        }\n      }, _callee9, null, [[0, 9]]);\n    }))).apply(this, arguments);\n  }\n  function callLoadersAndMaybeResolveData(_x47, _x48, _x49, _x50, _x51) {\n    return (_callLoadersAndMaybeResolveData = _callLoadersAndMaybeResolveData || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n      var _yield$Promise$all, _yield$Promise$all2, loaderResults, fetcherResults;\n      return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n        while (1) switch (_context10.prev = _context10.next) {\n          case 0:\n            _context10.next = 2;\n            return Promise.all([matchesToLoad.length ? callDataStrategy(\"loader\", request, matchesToLoad, matches) : []].concat(_toConsumableArray(fetchersToLoad.map(function (f) {\n              if (f.matches && f.match && f.controller) {\n                var fetcherRequest = createClientSideRequest(init.history, f.path, f.controller.signal);\n                return callDataStrategy(\"loader\", fetcherRequest, [f.match], f.matches).then(function (r) {\n                  return r[0];\n                });\n              } else {\n                return Promise.resolve({\n                  type: ResultType.error,\n                  error: getInternalRouterError(404, {\n                    pathname: f.path\n                  })\n                });\n              }\n            }))));\n          case 2:\n            _yield$Promise$all = _context10.sent;\n            _yield$Promise$all2 = _toArray(_yield$Promise$all);\n            loaderResults = _yield$Promise$all2[0];\n            fetcherResults = _yield$Promise$all2.slice(1);\n            _context10.next = 8;\n            return Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, loaderResults.map(function () {\n              return request.signal;\n            }), false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(function (f) {\n              return f.match;\n            }), fetcherResults, fetchersToLoad.map(function (f) {\n              return f.controller ? f.controller.signal : null;\n            }), true)]);\n          case 8:\n            return _context10.abrupt(\"return\", {\n              loaderResults: loaderResults,\n              fetcherResults: fetcherResults\n            });\n          case 9:\n          case \"end\":\n            return _context10.stop();\n        }\n      }, _callee10);\n    }))).apply(this, arguments);\n  }\n  function interruptActiveLoads() {\n    var _cancelledDeferredRou;\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    (_cancelledDeferredRou = cancelledDeferredRoutes).push.apply(_cancelledDeferredRou, _toConsumableArray(cancelActiveDeferreds()));\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach(function (_, key) {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.add(key);\n        abortFetcher(key);\n      }\n    });\n  }\n  function updateFetcherState(key, fetcher, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n  function setFetcherError(key, routeId, error, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    var boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: _defineProperty({}, boundaryMatch.route.id, error),\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n  function getFetcher(key) {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n      // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n  function deleteFetcher(key) {\n    var fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (fetchControllers.has(key) && !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    cancelledFetcherLoads.delete(key);\n    state.fetchers.delete(key);\n  }\n  function deleteFetcherAndUpdateState(key) {\n    if (future.v7_fetcherPersist) {\n      var count = (activeFetchers.get(key) || 0) - 1;\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  function abortFetcher(key) {\n    var controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n  function markFetchersDone(keys) {\n    var _iterator2 = _createForOfIteratorHelper(keys),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var key = _step2.value;\n        var fetcher = getFetcher(key);\n        var doneFetcher = getDoneFetcher(fetcher.data);\n        state.fetchers.set(key, doneFetcher);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n  function markFetchRedirectsDone() {\n    var doneKeys = [];\n    var updatedFetchers = false;\n    var _iterator3 = _createForOfIteratorHelper(fetchRedirectIds),\n      _step3;\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var key = _step3.value;\n        var fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n        if (fetcher.state === \"loading\") {\n          fetchRedirectIds.delete(key);\n          doneKeys.push(key);\n          updatedFetchers = true;\n        }\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n  function abortStaleFetchLoads(landedId) {\n    var yeetedKeys = [];\n    var _iterator4 = _createForOfIteratorHelper(fetchReloadIds),\n      _step4;\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var _step4$value = _slicedToArray(_step4.value, 2),\n          key = _step4$value[0],\n          id = _step4$value[1];\n        if (id < landedId) {\n          var fetcher = state.fetchers.get(key);\n          invariant(fetcher, \"Expected fetcher: \" + key);\n          if (fetcher.state === \"loading\") {\n            abortFetcher(key);\n            fetchReloadIds.delete(key);\n            yeetedKeys.push(key);\n          }\n        }\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n  function getBlocker(key, fn) {\n    var blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n    return blocker;\n  }\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key, newBlocker) {\n    var blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    var blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({\n      blockers: blockers\n    });\n  }\n  function shouldBlockNavigation(_ref4) {\n    var currentLocation = _ref4.currentLocation,\n      nextLocation = _ref4.nextLocation,\n      historyAction = _ref4.historyAction;\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n    var entries = Array.from(blockerFunctions.entries());\n    var _entries = _slicedToArray(entries[entries.length - 1], 2),\n      blockerKey = _entries[0],\n      blockerFunction = _entries[1];\n    var blocker = state.blockers.get(blockerKey);\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({\n      currentLocation: currentLocation,\n      nextLocation: nextLocation,\n      historyAction: historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n  function handleNavigational404(pathname) {\n    var error = getInternalRouterError(404, {\n      pathname: pathname\n    });\n    var routesToUse = inFlightDataRoutes || dataRoutes;\n    var _getShortCircuitMatch2 = getShortCircuitMatches(routesToUse),\n      matches = _getShortCircuitMatch2.matches,\n      route = _getShortCircuitMatch2.route;\n    // Cancel all pending deferred on 404s since we don't keep any routes\n    cancelActiveDeferreds();\n    return {\n      notFoundMatches: matches,\n      route: route,\n      error: error\n    };\n  }\n  function handleDiscoverRouteError(pathname, discoverResult) {\n    return {\n      boundaryId: findNearestBoundary(discoverResult.partialMatches).route.id,\n      error: getInternalRouterError(400, {\n        type: \"route-discovery\",\n        pathname: pathname,\n        message: discoverResult.error != null && \"message\" in discoverResult.error ? discoverResult.error : String(discoverResult.error)\n      })\n    };\n  }\n  function cancelActiveDeferreds(predicate) {\n    var cancelledRouteIds = [];\n    activeDeferreds.forEach(function (dfd, routeId) {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      var y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n    return function () {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n  function getScrollKey(location, matches) {\n    if (getScrollRestorationKey) {\n      var key = getScrollRestorationKey(location, matches.map(function (m) {\n        return convertRouteMatchToUiMatch(m, state.loaderData);\n      }));\n      return key || location.key;\n    }\n    return location.key;\n  }\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollPosition) {\n      var key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions) {\n      var key = getScrollKey(location, matches);\n      var y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n  function checkFogOfWar(matches, routesToUse, pathname) {\n    if (patchRoutesOnNavigationImpl) {\n      // Don't bother re-calling patchRouteOnMiss for a path we've already\n      // processed.  the last execution would have patched the route tree\n      // accordingly so `matches` here are already accurate.\n      if (discoveredRoutes.has(pathname)) {\n        return {\n          active: false,\n          matches: matches\n        };\n      }\n      if (!matches) {\n        var fogMatches = matchRoutesImpl(routesToUse, pathname, basename, true);\n        return {\n          active: true,\n          matches: fogMatches || []\n        };\n      } else {\n        if (Object.keys(matches[0].params).length > 0) {\n          // If we matched a dynamic param or a splat, it might only be because\n          // we haven't yet discovered other routes that would match with a\n          // higher score.  Call patchRoutesOnNavigation just to be sure\n          var partialMatches = matchRoutesImpl(routesToUse, pathname, basename, true);\n          return {\n            active: true,\n            matches: partialMatches\n          };\n        }\n      }\n    }\n    return {\n      active: false,\n      matches: null\n    };\n  }\n  function discoverRoutes(_x52, _x53, _x54) {\n    return (_discoverRoutes = _discoverRoutes || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(matches, pathname, signal) {\n      var partialMatches, _loop, _ret;\n      return _regeneratorRuntime().wrap(function _callee11$(_context12) {\n        while (1) switch (_context12.prev = _context12.next) {\n          case 0:\n            partialMatches = matches;\n            _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {\n              var isNonHMR, routesToUse, newMatches, newPartialMatches;\n              return _regeneratorRuntime().wrap(function _loop$(_context11) {\n                while (1) switch (_context11.prev = _context11.next) {\n                  case 0:\n                    isNonHMR = inFlightDataRoutes == null;\n                    routesToUse = inFlightDataRoutes || dataRoutes;\n                    _context11.prev = 2;\n                    _context11.next = 5;\n                    return loadLazyRouteChildren(patchRoutesOnNavigationImpl, pathname, partialMatches, routesToUse, manifest, mapRouteProperties, pendingPatchRoutes, signal);\n                  case 5:\n                    _context11.next = 10;\n                    break;\n                  case 7:\n                    _context11.prev = 7;\n                    _context11.t0 = _context11[\"catch\"](2);\n                    return _context11.abrupt(\"return\", {\n                      v: {\n                        type: \"error\",\n                        error: _context11.t0,\n                        partialMatches: partialMatches\n                      }\n                    });\n                  case 10:\n                    _context11.prev = 10;\n                    // If we are not in the middle of an HMR revalidation and we changed the\n                    // routes, provide a new identity so when we `updateState` at the end of\n                    // this navigation/fetch `router.routes` will be a new identity and\n                    // trigger a re-run of memoized `router.routes` dependencies.\n                    // HMR will already update the identity and reflow when it lands\n                    // `inFlightDataRoutes` in `completeNavigation`\n                    if (isNonHMR) {\n                      dataRoutes = _toConsumableArray(dataRoutes);\n                    }\n                    return _context11.finish(10);\n                  case 13:\n                    if (!signal.aborted) {\n                      _context11.next = 15;\n                      break;\n                    }\n                    return _context11.abrupt(\"return\", {\n                      v: {\n                        type: \"aborted\"\n                      }\n                    });\n                  case 15:\n                    newMatches = matchRoutes(routesToUse, pathname, basename);\n                    if (!newMatches) {\n                      _context11.next = 19;\n                      break;\n                    }\n                    addToFifoQueue(pathname, discoveredRoutes);\n                    return _context11.abrupt(\"return\", {\n                      v: {\n                        type: \"success\",\n                        matches: newMatches\n                      }\n                    });\n                  case 19:\n                    newPartialMatches = matchRoutesImpl(routesToUse, pathname, basename, true); // Avoid loops if the second pass results in the same partial matches\n                    if (!(!newPartialMatches || partialMatches.length === newPartialMatches.length && partialMatches.every(function (m, i) {\n                      return m.route.id === newPartialMatches[i].route.id;\n                    }))) {\n                      _context11.next = 23;\n                      break;\n                    }\n                    addToFifoQueue(pathname, discoveredRoutes);\n                    return _context11.abrupt(\"return\", {\n                      v: {\n                        type: \"success\",\n                        matches: null\n                      }\n                    });\n                  case 23:\n                    partialMatches = newPartialMatches;\n                  case 24:\n                  case \"end\":\n                    return _context11.stop();\n                }\n              }, _loop, null, [[2, 7, 10, 13]]);\n            });\n          case 2:\n            if (!true) {\n              _context12.next = 9;\n              break;\n            }\n            return _context12.delegateYield(_loop(), \"t0\", 4);\n          case 4:\n            _ret = _context12.t0;\n            if (!_ret) {\n              _context12.next = 7;\n              break;\n            }\n            return _context12.abrupt(\"return\", _ret.v);\n          case 7:\n            _context12.next = 2;\n            break;\n          case 9:\n          case \"end\":\n            return _context12.stop();\n        }\n      }, _callee11);\n    }))).apply(this, arguments);\n  }\n  function addToFifoQueue(path, queue) {\n    if (queue.size >= discoveredRoutesMaxSize) {\n      var first = queue.values().next().value;\n      queue.delete(first);\n    }\n    queue.add(path);\n  }\n  function _internalSetRoutes(newRoutes) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties, undefined, manifest);\n  }\n  function patchRoutes(routeId, children) {\n    var isNonHMR = inFlightDataRoutes == null;\n    var routesToUse = inFlightDataRoutes || dataRoutes;\n    patchRoutesImpl(routeId, children, routesToUse, manifest, mapRouteProperties);\n    // If we are not in the middle of an HMR revalidation and we changed the\n    // routes, provide a new identity and trigger a reflow via `updateState`\n    // to re-run memoized `router.routes` dependencies.\n    // HMR will already update the identity and reflow when it lands\n    // `inFlightDataRoutes` in `completeNavigation`\n    if (isNonHMR) {\n      dataRoutes = _toConsumableArray(dataRoutes);\n      updateState({});\n    }\n  }\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize: initialize,\n    subscribe: subscribe,\n    enableScrollRestoration: enableScrollRestoration,\n    navigate: navigate,\n    fetch: fetch,\n    revalidate: revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: function createHref(to) {\n      return init.history.createHref(to);\n    },\n    encodeLocation: function encodeLocation(to) {\n      return init.history.encodeLocation(to);\n    },\n    getFetcher: getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose: dispose,\n    getBlocker: getBlocker,\n    deleteBlocker: deleteBlocker,\n    patchRoutes: patchRoutes,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes: _internalSetRoutes\n  };\n  return router;\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\nvar UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\nfunction createStaticHandler(routes, opts) {\n  var _query, _queryRoute, _queryImpl, _submit, _loadRouteData, _callDataStrategy2;\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  var manifest = {};\n  var basename = (opts ? opts.basename : null) || \"/\";\n  var mapRouteProperties;\n  if (opts != null && opts.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts != null && opts.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    var detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = function mapRouteProperties(route) {\n      return {\n        hasErrorBoundary: detectErrorBoundary(route)\n      };\n    };\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  var future = _extends({\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false\n  }, opts ? opts.future : null);\n  var dataRoutes = convertRoutesToDataRoutes(routes, mapRouteProperties, undefined, manifest);\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   *\n   * - `opts.requestContext` is an optional server context that will be passed\n   *   to actions/loaders in the `context` parameter\n   * - `opts.skipLoaderErrorBubbling` is an optional parameter that will prevent\n   *   the bubbling of errors which allows single-fetch-type implementations\n   *   where the client will handle the bubbling and we may need to return data\n   *   for the handling route\n   */\n  function query(_x55, _x56) {\n    return (_query = _query || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(request, _temp3) {\n      var _ref15, requestContext, skipLoaderErrorBubbling, unstable_dataStrategy, url, method, location, matches, error, _getShortCircuitMatch3, methodNotAllowedMatches, route, _error9, _getShortCircuitMatch4, notFoundMatches, _route4, result;\n      return _regeneratorRuntime().wrap(function _callee12$(_context13) {\n        while (1) switch (_context13.prev = _context13.next) {\n          case 0:\n            _ref15 = _temp3 === void 0 ? {} : _temp3, requestContext = _ref15.requestContext, skipLoaderErrorBubbling = _ref15.skipLoaderErrorBubbling, unstable_dataStrategy = _ref15.unstable_dataStrategy;\n            url = new URL(request.url);\n            method = request.method;\n            location = createLocation(\"\", createPath(url), null, \"default\");\n            matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n            if (!(!isValidMethod(method) && method !== \"HEAD\")) {\n              _context13.next = 11;\n              break;\n            }\n            error = getInternalRouterError(405, {\n              method: method\n            });\n            _getShortCircuitMatch3 = getShortCircuitMatches(dataRoutes), methodNotAllowedMatches = _getShortCircuitMatch3.matches, route = _getShortCircuitMatch3.route;\n            return _context13.abrupt(\"return\", {\n              basename: basename,\n              location: location,\n              matches: methodNotAllowedMatches,\n              loaderData: {},\n              actionData: null,\n              errors: _defineProperty({}, route.id, error),\n              statusCode: error.status,\n              loaderHeaders: {},\n              actionHeaders: {},\n              activeDeferreds: null\n            });\n          case 11:\n            if (matches) {\n              _context13.next = 15;\n              break;\n            }\n            _error9 = getInternalRouterError(404, {\n              pathname: location.pathname\n            });\n            _getShortCircuitMatch4 = getShortCircuitMatches(dataRoutes), notFoundMatches = _getShortCircuitMatch4.matches, _route4 = _getShortCircuitMatch4.route;\n            return _context13.abrupt(\"return\", {\n              basename: basename,\n              location: location,\n              matches: notFoundMatches,\n              loaderData: {},\n              actionData: null,\n              errors: _defineProperty({}, _route4.id, _error9),\n              statusCode: _error9.status,\n              loaderHeaders: {},\n              actionHeaders: {},\n              activeDeferreds: null\n            });\n          case 15:\n            _context13.next = 17;\n            return queryImpl(request, location, matches, requestContext, unstable_dataStrategy || null, skipLoaderErrorBubbling === true, null);\n          case 17:\n            result = _context13.sent;\n            if (!isResponse(result)) {\n              _context13.next = 20;\n              break;\n            }\n            return _context13.abrupt(\"return\", result);\n          case 20:\n            return _context13.abrupt(\"return\", _extends({\n              location: location,\n              basename: basename\n            }, result));\n          case 21:\n          case \"end\":\n            return _context13.stop();\n        }\n      }, _callee12);\n    }))).apply(this, arguments);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   *\n   * - `opts.routeId` allows you to specify the specific route handler to call.\n   *   If not provided the handler will determine the proper route by matching\n   *   against `request.url`\n   * - `opts.requestContext` is an optional server context that will be passed\n   *    to actions/loaders in the `context` parameter\n   */\n  function queryRoute(_x57, _x58) {\n    return (_queryRoute = _queryRoute || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(request, _temp4) {\n      var _ref16, routeId, requestContext, unstable_dataStrategy, url, method, location, matches, match, result, error, _result$activeDeferre, _data;\n      return _regeneratorRuntime().wrap(function _callee13$(_context14) {\n        while (1) switch (_context14.prev = _context14.next) {\n          case 0:\n            _ref16 = _temp4 === void 0 ? {} : _temp4, routeId = _ref16.routeId, requestContext = _ref16.requestContext, unstable_dataStrategy = _ref16.unstable_dataStrategy;\n            url = new URL(request.url);\n            method = request.method;\n            location = createLocation(\"\", createPath(url), null, \"default\");\n            matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n            if (!(!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\")) {\n              _context14.next = 9;\n              break;\n            }\n            throw getInternalRouterError(405, {\n              method: method\n            });\n          case 9:\n            if (matches) {\n              _context14.next = 11;\n              break;\n            }\n            throw getInternalRouterError(404, {\n              pathname: location.pathname\n            });\n          case 11:\n            match = routeId ? matches.find(function (m) {\n              return m.route.id === routeId;\n            }) : getTargetMatch(matches, location);\n            if (!(routeId && !match)) {\n              _context14.next = 16;\n              break;\n            }\n            throw getInternalRouterError(403, {\n              pathname: location.pathname,\n              routeId: routeId\n            });\n          case 16:\n            if (match) {\n              _context14.next = 18;\n              break;\n            }\n            throw getInternalRouterError(404, {\n              pathname: location.pathname\n            });\n          case 18:\n            _context14.next = 20;\n            return queryImpl(request, location, matches, requestContext, unstable_dataStrategy || null, false, match);\n          case 20:\n            result = _context14.sent;\n            if (!isResponse(result)) {\n              _context14.next = 23;\n              break;\n            }\n            return _context14.abrupt(\"return\", result);\n          case 23:\n            error = result.errors ? Object.values(result.errors)[0] : undefined;\n            if (!(error !== undefined)) {\n              _context14.next = 26;\n              break;\n            }\n            throw error;\n          case 26:\n            if (!result.actionData) {\n              _context14.next = 28;\n              break;\n            }\n            return _context14.abrupt(\"return\", Object.values(result.actionData)[0]);\n          case 28:\n            if (!result.loaderData) {\n              _context14.next = 32;\n              break;\n            }\n            _data = Object.values(result.loaderData)[0];\n            if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n              _data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n            }\n            return _context14.abrupt(\"return\", _data);\n          case 32:\n            return _context14.abrupt(\"return\", undefined);\n          case 33:\n          case \"end\":\n            return _context14.stop();\n        }\n      }, _callee13);\n    }))).apply(this, arguments);\n  }\n  function queryImpl(_x59, _x60, _x61, _x62, _x63, _x64, _x65) {\n    return (_queryImpl = _queryImpl || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(request, location, matches, requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, routeMatch) {\n      var _result, result;\n      return _regeneratorRuntime().wrap(function _callee14$(_context15) {\n        while (1) switch (_context15.prev = _context15.next) {\n          case 0:\n            invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n            _context15.prev = 1;\n            if (!isMutationMethod(request.method.toLowerCase())) {\n              _context15.next = 7;\n              break;\n            }\n            _context15.next = 5;\n            return submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, routeMatch != null);\n          case 5:\n            _result = _context15.sent;\n            return _context15.abrupt(\"return\", _result);\n          case 7:\n            _context15.next = 9;\n            return loadRouteData(request, matches, requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, routeMatch);\n          case 9:\n            result = _context15.sent;\n            return _context15.abrupt(\"return\", isResponse(result) ? result : _extends({}, result, {\n              actionData: null,\n              actionHeaders: {}\n            }));\n          case 13:\n            _context15.prev = 13;\n            _context15.t0 = _context15[\"catch\"](1);\n            if (!(isHandlerResult(_context15.t0) && isResponse(_context15.t0.result))) {\n              _context15.next = 19;\n              break;\n            }\n            if (!(_context15.t0.type === ResultType.error)) {\n              _context15.next = 18;\n              break;\n            }\n            throw _context15.t0.result;\n          case 18:\n            return _context15.abrupt(\"return\", _context15.t0.result);\n          case 19:\n            if (!isRedirectResponse(_context15.t0)) {\n              _context15.next = 21;\n              break;\n            }\n            return _context15.abrupt(\"return\", _context15.t0);\n          case 21:\n            throw _context15.t0;\n          case 22:\n          case \"end\":\n            return _context15.stop();\n        }\n      }, _callee14, null, [[1, 13]]);\n    }))).apply(this, arguments);\n  }\n  function submit(_x66, _x67, _x68, _x69, _x70, _x71, _x72) {\n    return (_submit = _submit || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(request, matches, actionMatch, requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, isRouteRequest) {\n      var result, error, results, _error10, loaderRequest, boundaryMatch, _context16, context;\n      return _regeneratorRuntime().wrap(function _callee15$(_context17) {\n        while (1) switch (_context17.prev = _context17.next) {\n          case 0:\n            if (!(!actionMatch.route.action && !actionMatch.route.lazy)) {\n              _context17.next = 7;\n              break;\n            }\n            error = getInternalRouterError(405, {\n              method: request.method,\n              pathname: new URL(request.url).pathname,\n              routeId: actionMatch.route.id\n            });\n            if (!isRouteRequest) {\n              _context17.next = 4;\n              break;\n            }\n            throw error;\n          case 4:\n            result = {\n              type: ResultType.error,\n              error: error\n            };\n            _context17.next = 12;\n            break;\n          case 7:\n            _context17.next = 9;\n            return callDataStrategy(\"action\", request, [actionMatch], matches, isRouteRequest, requestContext, unstable_dataStrategy);\n          case 9:\n            results = _context17.sent;\n            result = results[0];\n            if (request.signal.aborted) {\n              throwStaticHandlerAbortedError(request, isRouteRequest, future);\n            }\n          case 12:\n            if (!isRedirectResult(result)) {\n              _context17.next = 14;\n              break;\n            }\n            throw new Response(null, {\n              status: result.response.status,\n              headers: {\n                Location: result.response.headers.get(\"Location\")\n              }\n            });\n          case 14:\n            if (!isDeferredResult(result)) {\n              _context17.next = 19;\n              break;\n            }\n            _error10 = getInternalRouterError(400, {\n              type: \"defer-action\"\n            });\n            if (!isRouteRequest) {\n              _context17.next = 18;\n              break;\n            }\n            throw _error10;\n          case 18:\n            result = {\n              type: ResultType.error,\n              error: _error10\n            };\n          case 19:\n            if (!isRouteRequest) {\n              _context17.next = 23;\n              break;\n            }\n            if (!isErrorResult(result)) {\n              _context17.next = 22;\n              break;\n            }\n            throw result.error;\n          case 22:\n            return _context17.abrupt(\"return\", {\n              matches: [actionMatch],\n              loaderData: {},\n              actionData: _defineProperty({}, actionMatch.route.id, result.data),\n              errors: null,\n              // Note: statusCode + headers are unused here since queryRoute will\n              // return the raw Response or value\n              statusCode: 200,\n              loaderHeaders: {},\n              actionHeaders: {},\n              activeDeferreds: null\n            });\n          case 23:\n            // Create a GET request for the loaders\n            loaderRequest = new Request(request.url, {\n              headers: request.headers,\n              redirect: request.redirect,\n              signal: request.signal\n            });\n            if (!isErrorResult(result)) {\n              _context17.next = 30;\n              break;\n            }\n            // Store off the pending error - we use it to determine which loaders\n            // to call and will commit it when we complete the navigation\n            boundaryMatch = skipLoaderErrorBubbling ? actionMatch : findNearestBoundary(matches, actionMatch.route.id);\n            _context17.next = 28;\n            return loadRouteData(loaderRequest, matches, requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, null, [boundaryMatch.route.id, result]);\n          case 28:\n            _context16 = _context17.sent;\n            return _context17.abrupt(\"return\", _extends({}, _context16, {\n              statusCode: isRouteErrorResponse(result.error) ? result.error.status : result.statusCode != null ? result.statusCode : 500,\n              actionData: null,\n              actionHeaders: _extends({}, result.headers ? _defineProperty({}, actionMatch.route.id, result.headers) : {})\n            }));\n          case 30:\n            _context17.next = 32;\n            return loadRouteData(loaderRequest, matches, requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, null);\n          case 32:\n            context = _context17.sent;\n            return _context17.abrupt(\"return\", _extends({}, context, {\n              actionData: _defineProperty({}, actionMatch.route.id, result.data)\n            }, result.statusCode ? {\n              statusCode: result.statusCode\n            } : {}, {\n              actionHeaders: result.headers ? _defineProperty({}, actionMatch.route.id, result.headers) : {}\n            }));\n          case 34:\n          case \"end\":\n            return _context17.stop();\n        }\n      }, _callee15);\n    }))).apply(this, arguments);\n  }\n  function loadRouteData(_x73, _x74, _x75, _x76, _x77, _x78, _x79) {\n    return (_loadRouteData = _loadRouteData || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(request, matches, requestContext, unstable_dataStrategy, skipLoaderErrorBubbling, routeMatch, pendingActionResult) {\n      var isRouteRequest, requestMatches, matchesToLoad, results, activeDeferreds, context, executedLoaders;\n      return _regeneratorRuntime().wrap(function _callee16$(_context18) {\n        while (1) switch (_context18.prev = _context18.next) {\n          case 0:\n            isRouteRequest = routeMatch != null; // Short circuit if we have no loaders to run (queryRoute())\n            if (!(isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy))) {\n              _context18.next = 3;\n              break;\n            }\n            throw getInternalRouterError(400, {\n              method: request.method,\n              pathname: new URL(request.url).pathname,\n              routeId: routeMatch == null ? void 0 : routeMatch.route.id\n            });\n          case 3:\n            requestMatches = routeMatch ? [routeMatch] : pendingActionResult && isErrorResult(pendingActionResult[1]) ? getLoaderMatchesUntilBoundary(matches, pendingActionResult[0]) : matches;\n            matchesToLoad = requestMatches.filter(function (m) {\n              return m.route.loader || m.route.lazy;\n            }); // Short circuit if we have no loaders to run (query())\n            if (!(matchesToLoad.length === 0)) {\n              _context18.next = 7;\n              break;\n            }\n            return _context18.abrupt(\"return\", {\n              matches: matches,\n              // Add a null for all matched routes for proper revalidation on the client\n              loaderData: matches.reduce(function (acc, m) {\n                return Object.assign(acc, _defineProperty({}, m.route.id, null));\n              }, {}),\n              errors: pendingActionResult && isErrorResult(pendingActionResult[1]) ? _defineProperty({}, pendingActionResult[0], pendingActionResult[1].error) : null,\n              statusCode: 200,\n              loaderHeaders: {},\n              activeDeferreds: null\n            });\n          case 7:\n            _context18.next = 9;\n            return callDataStrategy(\"loader\", request, matchesToLoad, matches, isRouteRequest, requestContext, unstable_dataStrategy);\n          case 9:\n            results = _context18.sent;\n            if (request.signal.aborted) {\n              throwStaticHandlerAbortedError(request, isRouteRequest, future);\n            }\n            // Process and commit output from loaders\n            activeDeferreds = new Map();\n            context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionResult, activeDeferreds, skipLoaderErrorBubbling); // Add a null for any non-loader matches for proper revalidation on the client\n            executedLoaders = new Set(matchesToLoad.map(function (match) {\n              return match.route.id;\n            }));\n            matches.forEach(function (match) {\n              if (!executedLoaders.has(match.route.id)) {\n                context.loaderData[match.route.id] = null;\n              }\n            });\n            return _context18.abrupt(\"return\", _extends({}, context, {\n              matches: matches,\n              activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n            }));\n          case 16:\n          case \"end\":\n            return _context18.stop();\n        }\n      }, _callee16);\n    }))).apply(this, arguments);\n  } // Utility wrapper for calling dataStrategy server-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  function callDataStrategy(_x80, _x81, _x82, _x83, _x84, _x85, _x86) {\n    return (_callDataStrategy2 = _callDataStrategy2 || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(type, request, matchesToLoad, matches, isRouteRequest, requestContext, unstable_dataStrategy) {\n      var results;\n      return _regeneratorRuntime().wrap(function _callee17$(_context19) {\n        while (1) switch (_context19.prev = _context19.next) {\n          case 0:\n            _context19.next = 2;\n            return callDataStrategyImpl(unstable_dataStrategy || defaultDataStrategy, type, request, matchesToLoad, matches, manifest, mapRouteProperties, requestContext);\n          case 2:\n            results = _context19.sent;\n            _context19.next = 5;\n            return Promise.all(results.map(function (result, i) {\n              if (isRedirectHandlerResult(result)) {\n                var response = result.result;\n                // Throw redirects and let the server handle them with an HTTP redirect\n                throw normalizeRelativeRoutingRedirectResponse(response, request, matchesToLoad[i].route.id, matches, basename, future.v7_relativeSplatPath);\n              }\n              if (isResponse(result.result) && isRouteRequest) {\n                // For SSR single-route requests, we want to hand Responses back\n                // directly without unwrapping\n                throw result;\n              }\n              return convertHandlerResultToDataResult(result);\n            }));\n          case 5:\n            return _context19.abrupt(\"return\", _context19.sent);\n          case 6:\n          case \"end\":\n            return _context19.stop();\n        }\n      }, _callee17);\n    }))).apply(this, arguments);\n  }\n  return {\n    dataRoutes: dataRoutes,\n    query: query,\n    queryRoute: queryRoute\n  };\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nfunction getStaticContextFromError(routes, context, error) {\n  var newContext = _extends({}, context, {\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: _defineProperty({}, context._deepestRenderedBoundaryId || routes[0].id, error)\n  });\n  return newContext;\n}\nfunction throwStaticHandlerAbortedError(request, isRouteRequest, future) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n  var method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(method + \"() call aborted: \" + request.method + \" \" + request.url);\n}\nfunction isSubmissionNavigation(opts) {\n  return opts != null && (\"formData\" in opts && opts.formData != null || \"body\" in opts && opts.body !== undefined);\n}\nfunction normalizeTo(location, matches, basename, prependBasename, to, v7_relativeSplatPath, fromRouteId, relative) {\n  var contextualMatches;\n  var activeRouteMatch;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    var _iterator5 = _createForOfIteratorHelper(matches),\n      _step5;\n    try {\n      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n        var match = _step5.value;\n        contextualMatches.push(match);\n        if (match.route.id === fromRouteId) {\n          activeRouteMatch = match;\n          break;\n        }\n      }\n    } catch (err) {\n      _iterator5.e(err);\n    } finally {\n      _iterator5.f();\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n  // Resolve the relative path\n  var path = resolveTo(to ? to : \".\", getResolveToMatches(contextualMatches, v7_relativeSplatPath), stripBasename(location.pathname, basename) || location.pathname, relative === \"path\");\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n  // Add an ?index param for matched index routes if we don't already have one\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch && activeRouteMatch.route.index && !hasNakedIndexQuery(path.search)) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  }\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n}\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path: path\n    };\n  }\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path: path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  }\n  var getInvalidBodyError = function getInvalidBodyError() {\n    return {\n      path: path,\n      error: getInternalRouterError(400, {\n        type: \"invalid-body\"\n      })\n    };\n  };\n  // Create a Submission on non-GET navigations\n  var rawFormMethod = opts.formMethod || \"get\";\n  var formMethod = normalizeFormMethod ? rawFormMethod.toUpperCase() : rawFormMethod.toLowerCase();\n  var formAction = stripHashFromPath(path);\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      var text = typeof opts.body === \"string\" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ?\n      // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n      Array.from(opts.body.entries()).reduce(function (acc, _ref5) {\n        var _ref20 = _slicedToArray(_ref5, 2),\n          name = _ref20[0],\n          value = _ref20[1];\n        return \"\" + acc + name + \"=\" + value + \"\\n\";\n      }, \"\") : String(opts.body);\n      return {\n        path: path,\n        submission: {\n          formMethod: formMethod,\n          formAction: formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text: text\n        }\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      try {\n        var _json = typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n        return {\n          path: path,\n          submission: {\n            formMethod: formMethod,\n            formAction: formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json: _json,\n            text: undefined\n          }\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n  invariant(typeof FormData === \"function\", \"FormData is not available in this environment\");\n  var searchParams;\n  var formData;\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n  var submission = {\n    formMethod: formMethod,\n    formAction: formAction,\n    formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n    formData: formData,\n    json: undefined,\n    text: undefined\n  };\n  if (isMutationMethod(submission.formMethod)) {\n    return {\n      path: path,\n      submission: submission\n    };\n  }\n  // Flatten submission onto URLSearchParams for GET submissions\n  var parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission: submission\n  };\n}\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  var boundaryMatches = matches;\n  if (boundaryId) {\n    var index = matches.findIndex(function (m) {\n      return m.route.id === boundaryId;\n    });\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\nfunction getMatchesToLoad(history, state, matches, submission, location, isInitialLoad, skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionResult) {\n  var actionResult = pendingActionResult ? isErrorResult(pendingActionResult[1]) ? pendingActionResult[1].error : pendingActionResult[1].data : undefined;\n  var currentUrl = history.createURL(state.location);\n  var nextUrl = history.createURL(location);\n  // Pick navigation matches that are net-new or qualify for revalidation\n  var boundaryId = pendingActionResult && isErrorResult(pendingActionResult[1]) ? pendingActionResult[0] : undefined;\n  var boundaryMatches = boundaryId ? getLoaderMatchesUntilBoundary(matches, boundaryId) : matches;\n  // Don't revalidate loaders by default after action 4xx/5xx responses\n  // when the flag is enabled.  They can still opt-into revalidation via\n  // `shouldRevalidate` via `actionResult`\n  var actionStatus = pendingActionResult ? pendingActionResult[1].statusCode : undefined;\n  var shouldSkipRevalidation = skipActionErrorRevalidation && actionStatus && actionStatus >= 400;\n  var navigationMatches = boundaryMatches.filter(function (match, index) {\n    var route = match.route;\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (route.loader == null) {\n      return false;\n    }\n    if (isInitialLoad) {\n      if (typeof route.loader !== \"function\" || route.loader.hydrate) {\n        return true;\n      }\n      return state.loaderData[route.id] === undefined && (\n      // Don't re-run if the loader ran and threw an error\n      !state.errors || state.errors[route.id] === undefined);\n    }\n    // Always call the loader on new route instances and pending defer cancellations\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(function (id) {\n      return id === match.route.id;\n    })) {\n      return true;\n    }\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    var currentRouteMatch = state.matches[index];\n    var nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl: currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl: nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult: actionResult,\n      actionStatus: actionStatus,\n      defaultShouldRevalidate: shouldSkipRevalidation ? false :\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      isRevalidationRequired || currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search ||\n      // Search params affect all loaders\n      currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  });\n  // Pick fetcher.loads that need to be revalidated\n  var revalidatingFetchers = [];\n  fetchLoadMatches.forEach(function (f, key) {\n    // Don't revalidate:\n    //  - on initial load (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (isInitialLoad || !matches.some(function (m) {\n      return m.route.id === f.routeId;\n    }) || deletedFetchers.has(key)) {\n      return;\n    }\n    var fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key: key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null\n      });\n      return;\n    }\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    var fetcher = state.fetchers.get(key);\n    var fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n    var shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.has(key)) {\n      // Always mark for revalidation if the fetcher was cancelled\n      cancelledFetcherLoads.delete(key);\n      shouldRevalidate = true;\n    } else if (fetcher && fetcher.state !== \"idle\" && fetcher.data === undefined) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n        currentUrl: currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl: nextUrl,\n        nextParams: matches[matches.length - 1].params\n      }, submission, {\n        actionResult: actionResult,\n        actionStatus: actionStatus,\n        defaultShouldRevalidate: shouldSkipRevalidation ? false : isRevalidationRequired\n      }));\n    }\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key: key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  var isNew =\n  // [a] -> [a, b]\n  !currentMatch ||\n  // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id;\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  var isMissingData = currentLoaderData[match.route.id] === undefined;\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\nfunction isNewRouteInstance(currentMatch, match) {\n  var currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    var routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n  return arg.defaultShouldRevalidate;\n}\n/**\n * Idempotent utility to execute patchRoutesOnNavigation() to lazily load route\n * definitions and update the routes/routeManifest\n */\nfunction loadLazyRouteChildren(_x87, _x88, _x89, _x90, _x91, _x92, _x93, _x94) {\n  return (_loadLazyRouteChildren = _loadLazyRouteChildren || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18(patchRoutesOnNavigationImpl, path, matches, routes, manifest, mapRouteProperties, pendingRouteChildren, signal) {\n    var key, pending;\n    return _regeneratorRuntime().wrap(function _callee18$(_context20) {\n      while (1) switch (_context20.prev = _context20.next) {\n        case 0:\n          key = [path].concat(_toConsumableArray(matches.map(function (m) {\n            return m.route.id;\n          }))).join(\"-\");\n          _context20.prev = 1;\n          pending = pendingRouteChildren.get(key);\n          if (!pending) {\n            pending = patchRoutesOnNavigationImpl({\n              path: path,\n              matches: matches,\n              patch: function patch(routeId, children) {\n                if (!signal.aborted) {\n                  patchRoutesImpl(routeId, children, routes, manifest, mapRouteProperties);\n                }\n              }\n            });\n            pendingRouteChildren.set(key, pending);\n          }\n          if (!(pending && isPromise(pending))) {\n            _context20.next = 7;\n            break;\n          }\n          _context20.next = 7;\n          return pending;\n        case 7:\n          _context20.prev = 7;\n          pendingRouteChildren.delete(key);\n          return _context20.finish(7);\n        case 10:\n        case \"end\":\n          return _context20.stop();\n      }\n    }, _callee18, null, [[1,, 7, 10]]);\n  }))).apply(this, arguments);\n}\nfunction patchRoutesImpl(routeId, children, routesToUse, manifest, mapRouteProperties) {\n  if (routeId) {\n    var _route$children;\n    var route = manifest[routeId];\n    invariant(route, \"No route found to patch children into: routeId = \" + routeId);\n    var dataChildren = convertRoutesToDataRoutes(children, mapRouteProperties, [routeId, \"patch\", String(((_route$children = route.children) == null ? void 0 : _route$children.length) || \"0\")], manifest);\n    if (route.children) {\n      var _route$children2;\n      (_route$children2 = route.children).push.apply(_route$children2, _toConsumableArray(dataChildren));\n    } else {\n      route.children = dataChildren;\n    }\n  } else {\n    var _dataChildren = convertRoutesToDataRoutes(children, mapRouteProperties, [\"patch\", String(routesToUse.length || \"0\")], manifest);\n    routesToUse.push.apply(routesToUse, _toConsumableArray(_dataChildren));\n  }\n}\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nfunction loadLazyRouteModule(_x95, _x96, _x97) {\n  return (_loadLazyRouteModule = _loadLazyRouteModule || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19(route, mapRouteProperties, manifest) {\n    var lazyRoute, routeToUpdate, routeUpdates, lazyRouteProperty, staticRouteValue, isPropertyStaticallyDefined;\n    return _regeneratorRuntime().wrap(function _callee19$(_context21) {\n      while (1) switch (_context21.prev = _context21.next) {\n        case 0:\n          if (route.lazy) {\n            _context21.next = 2;\n            break;\n          }\n          return _context21.abrupt(\"return\");\n        case 2:\n          _context21.next = 4;\n          return route.lazy();\n        case 4:\n          lazyRoute = _context21.sent;\n          if (route.lazy) {\n            _context21.next = 7;\n            break;\n          }\n          return _context21.abrupt(\"return\");\n        case 7:\n          routeToUpdate = manifest[route.id];\n          invariant(routeToUpdate, \"No route found in manifest\");\n          // Update the route in place.  This should be safe because there's no way\n          // we could yet be sitting on this route as we can't get there without\n          // resolving lazy() first.\n          //\n          // This is different than the HMR \"update\" use-case where we may actively be\n          // on the route being updated.  The main concern boils down to \"does this\n          // mutation affect any ongoing navigations or any current state.matches\n          // values?\".  If not, it should be safe to update in place.\n          routeUpdates = {};\n          for (lazyRouteProperty in lazyRoute) {\n            staticRouteValue = routeToUpdate[lazyRouteProperty];\n            isPropertyStaticallyDefined = staticRouteValue !== undefined &&\n            // This property isn't static since it should always be updated based\n            // on the route updates\n            lazyRouteProperty !== \"hasErrorBoundary\";\n            warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n            if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n              routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n            }\n          }\n          // Mutate the route with the provided updates.  Do this first so we pass\n          // the updated version to mapRouteProperties\n          Object.assign(routeToUpdate, routeUpdates);\n          // Mutate the `hasErrorBoundary` property on the route based on the route\n          // updates and remove the `lazy` function so we don't resolve the lazy\n          // route again.\n          Object.assign(routeToUpdate, _extends({}, mapRouteProperties(routeToUpdate), {\n            lazy: undefined\n          }));\n        case 13:\n        case \"end\":\n          return _context21.stop();\n      }\n    }, _callee19);\n  }))).apply(this, arguments);\n} // Default implementation of `dataStrategy` which fetches all loaders in parallel\nfunction defaultDataStrategy(opts) {\n  return Promise.all(opts.matches.map(function (m) {\n    return m.resolve();\n  }));\n}\nfunction callDataStrategyImpl(_x98, _x99, _x100, _x101, _x102, _x103, _x104, _x105) {\n  return (_callDataStrategyImpl = _callDataStrategyImpl || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee20(dataStrategyImpl, type, request, matchesToLoad, matches, manifest, mapRouteProperties, requestContext) {\n    var routeIdsToLoad, loadedMatches, results;\n    return _regeneratorRuntime().wrap(function _callee20$(_context22) {\n      while (1) switch (_context22.prev = _context22.next) {\n        case 0:\n          routeIdsToLoad = matchesToLoad.reduce(function (acc, m) {\n            return acc.add(m.route.id);\n          }, new Set());\n          loadedMatches = new Set(); // Send all matches here to allow for a middleware-type implementation.\n          // handler will be a no-op for unneeded routes and we filter those results\n          // back out below.\n          _context22.next = 4;\n          return dataStrategyImpl({\n            matches: matches.map(function (match) {\n              var shouldLoad = routeIdsToLoad.has(match.route.id);\n              // `resolve` encapsulates the route.lazy, executing the\n              // loader/action, and mapping return values/thrown errors to a\n              // HandlerResult.  Users can pass a callback to take fine-grained control\n              // over the execution of the loader/action\n              var resolve = function resolve(handlerOverride) {\n                loadedMatches.add(match.route.id);\n                return shouldLoad ? callLoaderOrAction(type, request, match, manifest, mapRouteProperties, handlerOverride, requestContext) : Promise.resolve({\n                  type: ResultType.data,\n                  result: undefined\n                });\n              };\n              return _extends({}, match, {\n                shouldLoad: shouldLoad,\n                resolve: resolve\n              });\n            }),\n            request: request,\n            params: matches[0].params,\n            context: requestContext\n          });\n        case 4:\n          results = _context22.sent;\n          // Throw if any loadRoute implementations not called since they are what\n          // ensures a route is fully loaded\n          matches.forEach(function (m) {\n            return invariant(loadedMatches.has(m.route.id), \"`match.resolve()` was not called for route id \\\"\" + m.route.id + \"\\\". \" + \"You must call `match.resolve()` on every match passed to \" + \"`dataStrategy` to ensure all routes are properly loaded.\");\n          });\n          // Filter out any middleware-only matches for which we didn't need to run handlers\n          return _context22.abrupt(\"return\", results.filter(function (_, i) {\n            return routeIdsToLoad.has(matches[i].route.id);\n          }));\n        case 7:\n        case \"end\":\n          return _context22.stop();\n      }\n    }, _callee20);\n  }))).apply(this, arguments);\n} // Default logic for calling a loader/action is the user has no specified a dataStrategy\nfunction callLoaderOrAction(_x106, _x107, _x108, _x109, _x110, _x111, _x112) {\n  return (_callLoaderOrAction = _callLoaderOrAction || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee22(type, request, match, manifest, mapRouteProperties, handlerOverride, staticContext) {\n    var result, onReject, runHandler, handler, handlerError, _yield$Promise$all3, _yield$Promise$all4, value, url, pathname, _url, _pathname;\n    return _regeneratorRuntime().wrap(function _callee22$(_context24) {\n      while (1) switch (_context24.prev = _context24.next) {\n        case 0:\n          runHandler = function runHandler(handler) {\n            // Setup a promise we can race against so that abort signals short circuit\n            var reject;\n            // This will never resolve so safe to type it as Promise<HandlerResult> to\n            // satisfy the function return value\n            var abortPromise = new Promise(function (_, r) {\n              return reject = r;\n            });\n            onReject = function onReject() {\n              return reject();\n            };\n            request.signal.addEventListener(\"abort\", onReject);\n            var actualHandler = function actualHandler(ctx) {\n              if (typeof handler !== \"function\") {\n                return Promise.reject(new Error(\"You cannot call the handler for a route which defines a boolean \" + (\"\\\"\" + type + \"\\\" [routeId: \" + match.route.id + \"]\")));\n              }\n              return handler.apply(void 0, [{\n                request: request,\n                params: match.params,\n                context: staticContext\n              }].concat(_toConsumableArray(ctx !== undefined ? [ctx] : [])));\n            };\n            var handlerPromise;\n            if (handlerOverride) {\n              handlerPromise = handlerOverride(function (ctx) {\n                return actualHandler(ctx);\n              });\n            } else {\n              handlerPromise = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee21() {\n                var val;\n                return _regeneratorRuntime().wrap(function _callee21$(_context23) {\n                  while (1) switch (_context23.prev = _context23.next) {\n                    case 0:\n                      _context23.prev = 0;\n                      _context23.next = 3;\n                      return actualHandler();\n                    case 3:\n                      val = _context23.sent;\n                      return _context23.abrupt(\"return\", {\n                        type: \"data\",\n                        result: val\n                      });\n                    case 7:\n                      _context23.prev = 7;\n                      _context23.t0 = _context23[\"catch\"](0);\n                      return _context23.abrupt(\"return\", {\n                        type: \"error\",\n                        result: _context23.t0\n                      });\n                    case 10:\n                    case \"end\":\n                      return _context23.stop();\n                  }\n                }, _callee21, null, [[0, 7]]);\n              }))();\n            }\n            return Promise.race([handlerPromise, abortPromise]);\n          };\n          _context24.prev = 1;\n          handler = match.route[type];\n          if (!match.route.lazy) {\n            _context24.next = 33;\n            break;\n          }\n          if (!handler) {\n            _context24.next = 15;\n            break;\n          }\n          _context24.next = 7;\n          return Promise.all([\n          // If the handler throws, don't let it immediately bubble out,\n          // since we need to let the lazy() execution finish so we know if this\n          // route has a boundary that can handle the error\n          runHandler(handler).catch(function (e) {\n            handlerError = e;\n          }), loadLazyRouteModule(match.route, mapRouteProperties, manifest)]);\n        case 7:\n          _yield$Promise$all3 = _context24.sent;\n          _yield$Promise$all4 = _slicedToArray(_yield$Promise$all3, 1);\n          value = _yield$Promise$all4[0];\n          if (!(handlerError !== undefined)) {\n            _context24.next = 12;\n            break;\n          }\n          throw handlerError;\n        case 12:\n          result = value;\n          _context24.next = 31;\n          break;\n        case 15:\n          _context24.next = 17;\n          return loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n        case 17:\n          handler = match.route[type];\n          if (!handler) {\n            _context24.next = 24;\n            break;\n          }\n          _context24.next = 21;\n          return runHandler(handler);\n        case 21:\n          result = _context24.sent;\n          _context24.next = 31;\n          break;\n        case 24:\n          if (!(type === \"action\")) {\n            _context24.next = 30;\n            break;\n          }\n          url = new URL(request.url);\n          pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname: pathname,\n            routeId: match.route.id\n          });\n        case 30:\n          return _context24.abrupt(\"return\", {\n            type: ResultType.data,\n            result: undefined\n          });\n        case 31:\n          _context24.next = 42;\n          break;\n        case 33:\n          if (handler) {\n            _context24.next = 39;\n            break;\n          }\n          _url = new URL(request.url);\n          _pathname = _url.pathname + _url.search;\n          throw getInternalRouterError(404, {\n            pathname: _pathname\n          });\n        case 39:\n          _context24.next = 41;\n          return runHandler(handler);\n        case 41:\n          result = _context24.sent;\n        case 42:\n          invariant(result.result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n          _context24.next = 48;\n          break;\n        case 45:\n          _context24.prev = 45;\n          _context24.t0 = _context24[\"catch\"](1);\n          return _context24.abrupt(\"return\", {\n            type: ResultType.error,\n            result: _context24.t0\n          });\n        case 48:\n          _context24.prev = 48;\n          if (onReject) {\n            request.signal.removeEventListener(\"abort\", onReject);\n          }\n          return _context24.finish(48);\n        case 51:\n          return _context24.abrupt(\"return\", result);\n        case 52:\n        case \"end\":\n          return _context24.stop();\n      }\n    }, _callee22, null, [[1, 45, 48, 51]]);\n  }))).apply(this, arguments);\n}\nfunction convertHandlerResultToDataResult(_x113) {\n  return (_convertHandlerResultToDataResult = _convertHandlerResultToDataResult || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee23(handlerResult) {\n    var result, type, _data2, contentType, _result$init2, _result$init, _result$init3, _result$init4, _result$init5, _result$init6;\n    return _regeneratorRuntime().wrap(function _callee23$(_context25) {\n      while (1) switch (_context25.prev = _context25.next) {\n        case 0:\n          result = handlerResult.result, type = handlerResult.type;\n          if (!isResponse(result)) {\n            _context25.next = 25;\n            break;\n          }\n          _context25.prev = 2;\n          contentType = result.headers.get(\"Content-Type\"); // Check between word boundaries instead of startsWith() due to the last\n          // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n          if (!(contentType && /\\bapplication\\/json\\b/.test(contentType))) {\n            _context25.next = 14;\n            break;\n          }\n          if (!(result.body == null)) {\n            _context25.next = 9;\n            break;\n          }\n          _data2 = null;\n          _context25.next = 12;\n          break;\n        case 9:\n          _context25.next = 11;\n          return result.json();\n        case 11:\n          _data2 = _context25.sent;\n        case 12:\n          _context25.next = 17;\n          break;\n        case 14:\n          _context25.next = 16;\n          return result.text();\n        case 16:\n          _data2 = _context25.sent;\n        case 17:\n          _context25.next = 22;\n          break;\n        case 19:\n          _context25.prev = 19;\n          _context25.t0 = _context25[\"catch\"](2);\n          return _context25.abrupt(\"return\", {\n            type: ResultType.error,\n            error: _context25.t0\n          });\n        case 22:\n          if (!(type === ResultType.error)) {\n            _context25.next = 24;\n            break;\n          }\n          return _context25.abrupt(\"return\", {\n            type: ResultType.error,\n            error: new ErrorResponseImpl(result.status, result.statusText, _data2),\n            statusCode: result.status,\n            headers: result.headers\n          });\n        case 24:\n          return _context25.abrupt(\"return\", {\n            type: ResultType.data,\n            data: _data2,\n            statusCode: result.status,\n            headers: result.headers\n          });\n        case 25:\n          if (!(type === ResultType.error)) {\n            _context25.next = 31;\n            break;\n          }\n          if (!isDataWithResponseInit(result)) {\n            _context25.next = 30;\n            break;\n          }\n          if (!(result.data instanceof Error)) {\n            _context25.next = 29;\n            break;\n          }\n          return _context25.abrupt(\"return\", {\n            type: ResultType.error,\n            error: result.data,\n            statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status\n          });\n        case 29:\n          // Convert thrown unstable_data() to ErrorResponse instances\n          result = new ErrorResponseImpl(((_result$init2 = result.init) == null ? void 0 : _result$init2.status) || 500, undefined, result.data);\n        case 30:\n          return _context25.abrupt(\"return\", {\n            type: ResultType.error,\n            error: result,\n            statusCode: isRouteErrorResponse(result) ? result.status : undefined\n          });\n        case 31:\n          if (!isDeferredData(result)) {\n            _context25.next = 33;\n            break;\n          }\n          return _context25.abrupt(\"return\", {\n            type: ResultType.deferred,\n            deferredData: result,\n            statusCode: (_result$init3 = result.init) == null ? void 0 : _result$init3.status,\n            headers: ((_result$init4 = result.init) == null ? void 0 : _result$init4.headers) && new Headers(result.init.headers)\n          });\n        case 33:\n          if (!isDataWithResponseInit(result)) {\n            _context25.next = 35;\n            break;\n          }\n          return _context25.abrupt(\"return\", {\n            type: ResultType.data,\n            data: result.data,\n            statusCode: (_result$init5 = result.init) == null ? void 0 : _result$init5.status,\n            headers: (_result$init6 = result.init) != null && _result$init6.headers ? new Headers(result.init.headers) : undefined\n          });\n        case 35:\n          return _context25.abrupt(\"return\", {\n            type: ResultType.data,\n            data: result\n          });\n        case 36:\n        case \"end\":\n          return _context25.stop();\n      }\n    }, _callee23, null, [[2, 19]]);\n  }))).apply(this, arguments);\n} // Support relative routing in internal redirects\nfunction normalizeRelativeRoutingRedirectResponse(response, request, routeId, matches, basename, v7_relativeSplatPath) {\n  var location = response.headers.get(\"Location\");\n  invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\");\n  if (!ABSOLUTE_URL_REGEX.test(location)) {\n    var trimmedMatches = matches.slice(0, matches.findIndex(function (m) {\n      return m.route.id === routeId;\n    }) + 1);\n    location = normalizeTo(new URL(request.url), trimmedMatches, basename, true, location, v7_relativeSplatPath);\n    response.headers.set(\"Location\", location);\n  }\n  return response;\n}\nfunction normalizeRedirectLocation(location, currentUrl, basename) {\n  if (ABSOLUTE_URL_REGEX.test(location)) {\n    // Strip off the protocol+origin for same-origin + same-basename absolute redirects\n    var normalizedLocation = location;\n    var url = normalizedLocation.startsWith(\"//\") ? new URL(currentUrl.protocol + normalizedLocation) : new URL(normalizedLocation);\n    var isSameBasename = stripBasename(url.pathname, basename) != null;\n    if (url.origin === currentUrl.origin && isSameBasename) {\n      return url.pathname + url.search + url.hash;\n    }\n  }\n  return location;\n}\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(history, location, signal, submission) {\n  var url = history.createURL(stripHashFromPath(location)).toString();\n  var init = {\n    signal: signal\n  };\n  if (submission && isMutationMethod(submission.formMethod)) {\n    var formMethod = submission.formMethod,\n      formEncType = submission.formEncType;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({\n        \"Content-Type\": formEncType\n      });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (formEncType === \"application/x-www-form-urlencoded\" && submission.formData) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n  return new Request(url, init);\n}\nfunction convertFormDataToSearchParams(formData) {\n  var searchParams = new URLSearchParams();\n  var _iterator6 = _createForOfIteratorHelper(formData.entries()),\n    _step6;\n  try {\n    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n      var _step6$value = _slicedToArray(_step6.value, 2),\n        key = _step6$value[0],\n        value = _step6$value[1];\n      // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n      searchParams.append(key, typeof value === \"string\" ? value : value.name);\n    }\n  } catch (err) {\n    _iterator6.e(err);\n  } finally {\n    _iterator6.f();\n  }\n  return searchParams;\n}\nfunction convertSearchParamsToFormData(searchParams) {\n  var formData = new FormData();\n  var _iterator7 = _createForOfIteratorHelper(searchParams.entries()),\n    _step7;\n  try {\n    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n      var _step7$value = _slicedToArray(_step7.value, 2),\n        key = _step7$value[0],\n        value = _step7$value[1];\n      formData.append(key, value);\n    }\n  } catch (err) {\n    _iterator7.e(err);\n  } finally {\n    _iterator7.f();\n  }\n  return formData;\n}\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingActionResult, activeDeferreds, skipLoaderErrorBubbling) {\n  // Fill in loaderData/errors from our loaders\n  var loaderData = {};\n  var errors = null;\n  var statusCode;\n  var foundError = false;\n  var loaderHeaders = {};\n  var pendingError = pendingActionResult && isErrorResult(pendingActionResult[1]) ? pendingActionResult[1].error : undefined;\n  // Process loader results into state.loaderData/state.errors\n  results.forEach(function (result, index) {\n    var id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n    if (isErrorResult(result)) {\n      var error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError !== undefined) {\n        error = pendingError;\n        pendingError = undefined;\n      }\n      errors = errors || {};\n      if (skipLoaderErrorBubbling) {\n        errors[id] = error;\n      } else {\n        // Look upwards from the matched route for the closest ancestor error\n        // boundary, defaulting to the root match.  Prefer higher error values\n        // if lower errors bubble to the same boundary\n        var boundaryMatch = findNearestBoundary(matches, id);\n        if (errors[boundaryMatch.route.id] == null) {\n          errors[boundaryMatch.route.id] = error;\n        }\n      }\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      } else {\n        loaderData[id] = result.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      }\n    }\n  });\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError !== undefined && pendingActionResult) {\n    errors = _defineProperty({}, pendingActionResult[0], pendingError);\n    loaderData[pendingActionResult[0]] = undefined;\n  }\n  return {\n    loaderData: loaderData,\n    errors: errors,\n    statusCode: statusCode || 200,\n    loaderHeaders: loaderHeaders\n  };\n}\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingActionResult, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  var _processRouteLoaderDa = processRouteLoaderData(matches, matchesToLoad, results, pendingActionResult, activeDeferreds, false // This method is only called client side so we always want to bubble\n    ),\n    loaderData = _processRouteLoaderDa.loaderData,\n    errors = _processRouteLoaderDa.errors;\n  // Process results from our revalidating fetchers\n  for (var index = 0; index < revalidatingFetchers.length; index++) {\n    var _revalidatingFetchers = revalidatingFetchers[index],\n      key = _revalidatingFetchers.key,\n      match = _revalidatingFetchers.match,\n      controller = _revalidatingFetchers.controller;\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    var result = fetcherResults[index];\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      var boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, _defineProperty({}, boundaryMatch.route.id, result.error));\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      var doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  return {\n    loaderData: loaderData,\n    errors: errors\n  };\n}\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  var mergedLoaderData = _extends({}, newLoaderData);\n  var _iterator8 = _createForOfIteratorHelper(matches),\n    _step8;\n  try {\n    for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n      var match = _step8.value;\n      var id = match.route.id;\n      if (newLoaderData.hasOwnProperty(id)) {\n        if (newLoaderData[id] !== undefined) {\n          mergedLoaderData[id] = newLoaderData[id];\n        }\n      } else if (loaderData[id] !== undefined && match.route.loader) {\n        // Preserve existing keys not included in newLoaderData and where a loader\n        // wasn't removed by HMR\n        mergedLoaderData[id] = loaderData[id];\n      }\n      if (errors && errors.hasOwnProperty(id)) {\n        // Don't keep any loader data below the boundary\n        break;\n      }\n    }\n  } catch (err) {\n    _iterator8.e(err);\n  } finally {\n    _iterator8.f();\n  }\n  return mergedLoaderData;\n}\nfunction getActionDataForCommit(pendingActionResult) {\n  if (!pendingActionResult) {\n    return {};\n  }\n  return isErrorResult(pendingActionResult[1]) ? {\n    // Clear out prior actionData on errors\n    actionData: {}\n  } : {\n    actionData: _defineProperty({}, pendingActionResult[0], pendingActionResult[1].data)\n  };\n}\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(matches, routeId) {\n  var eligibleMatches = routeId ? matches.slice(0, matches.findIndex(function (m) {\n    return m.route.id === routeId;\n  }) + 1) : _toConsumableArray(matches);\n  return eligibleMatches.reverse().find(function (m) {\n    return m.route.hasErrorBoundary === true;\n  }) || matches[0];\n}\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  var route = routes.length === 1 ? routes[0] : routes.find(function (r) {\n    return r.index || !r.path || r.path === \"/\";\n  }) || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route: route\n    }],\n    route: route\n  };\n}\nfunction getInternalRouterError(status, _temp5) {\n  var _ref22 = _temp5 === void 0 ? {} : _temp5,\n    pathname = _ref22.pathname,\n    routeId = _ref22.routeId,\n    method = _ref22.method,\n    type = _ref22.type,\n    message = _ref22.message;\n  var statusText = \"Unknown Server Error\";\n  var errorMessage = \"Unknown @remix-run/router error\";\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (type === \"route-discovery\") {\n      errorMessage = \"Unable to match URL \\\"\" + pathname + \"\\\" - the `unstable_patchRoutesOnNavigation()` \" + (\"function threw the following error:\\n\" + message);\n    } else if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n  return new ErrorResponseImpl(status || 500, statusText, new Error(errorMessage), true);\n}\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results) {\n  for (var i = results.length - 1; i >= 0; i--) {\n    var result = results[i];\n    if (isRedirectResult(result)) {\n      return {\n        result: result,\n        idx: i\n      };\n    }\n  }\n}\nfunction stripHashFromPath(path) {\n  var parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\nfunction isHashChangeOnly(a, b) {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\nfunction isPromise(val) {\n  return typeof val === \"object\" && val != null && \"then\" in val;\n}\nfunction isHandlerResult(result) {\n  return result != null && typeof result === \"object\" && \"type\" in result && \"result\" in result && (result.type === ResultType.data || result.type === ResultType.error);\n}\nfunction isRedirectHandlerResult(result) {\n  return isResponse(result.result) && redirectStatusCodes.has(result.result.status);\n}\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\nfunction isDataWithResponseInit(value) {\n  return typeof value === \"object\" && value != null && \"type\" in value && \"data\" in value && \"init\" in value && value.type === \"DataWithResponseInit\";\n}\nfunction isDeferredData(value) {\n  var deferred = value;\n  return deferred && typeof deferred === \"object\" && typeof deferred.data === \"object\" && typeof deferred.subscribe === \"function\" && typeof deferred.cancel === \"function\" && typeof deferred.resolveData === \"function\";\n}\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n  var status = result.status;\n  var location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toLowerCase());\n}\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toLowerCase());\n}\nfunction resolveDeferredResults(_x114, _x115, _x116, _x117, _x118, _x119) {\n  return (_resolveDeferredResults = _resolveDeferredResults || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee24(currentMatches, matchesToLoad, results, signals, isFetcher, currentLoaderData) {\n    var _loop2, index;\n    return _regeneratorRuntime().wrap(function _callee24$(_context27) {\n      while (1) switch (_context27.prev = _context27.next) {\n        case 0:\n          _loop2 = /*#__PURE__*/_regeneratorRuntime().mark(function _loop2(index) {\n            var result, match, currentMatch, isRevalidatingLoader, signal;\n            return _regeneratorRuntime().wrap(function _loop2$(_context26) {\n              while (1) switch (_context26.prev = _context26.next) {\n                case 0:\n                  result = results[index];\n                  match = matchesToLoad[index]; // If we don't have a match, then we can have a deferred result to do\n                  // anything with.  This is for revalidating fetchers where the route was\n                  // removed during HMR\n                  if (match) {\n                    _context26.next = 4;\n                    break;\n                  }\n                  return _context26.abrupt(\"return\", 1);\n                case 4:\n                  currentMatch = currentMatches.find(function (m) {\n                    return m.route.id === match.route.id;\n                  });\n                  isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n                  if (!(isDeferredResult(result) && (isFetcher || isRevalidatingLoader))) {\n                    _context26.next = 11;\n                    break;\n                  }\n                  // Note: we do not have to touch activeDeferreds here since we race them\n                  // against the signal in resolveDeferredData and they'll get aborted\n                  // there if needed\n                  signal = signals[index];\n                  invariant(signal, \"Expected an AbortSignal for revalidating fetcher deferred result\");\n                  _context26.next = 11;\n                  return resolveDeferredData(result, signal, isFetcher).then(function (result) {\n                    if (result) {\n                      results[index] = result || results[index];\n                    }\n                  });\n                case 11:\n                case \"end\":\n                  return _context26.stop();\n              }\n            }, _loop2);\n          });\n          index = 0;\n        case 2:\n          if (!(index < results.length)) {\n            _context27.next = 9;\n            break;\n          }\n          return _context27.delegateYield(_loop2(index), \"t0\", 4);\n        case 4:\n          if (!_context27.t0) {\n            _context27.next = 6;\n            break;\n          }\n          return _context27.abrupt(\"continue\", 6);\n        case 6:\n          index++;\n          _context27.next = 2;\n          break;\n        case 9:\n        case \"end\":\n          return _context27.stop();\n      }\n    }, _callee24);\n  }))).apply(this, arguments);\n}\nfunction resolveDeferredData(_x120, _x121, _x122) {\n  return (_resolveDeferredData = _resolveDeferredData || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee25(result, signal, unwrap) {\n    var aborted;\n    return _regeneratorRuntime().wrap(function _callee25$(_context28) {\n      while (1) switch (_context28.prev = _context28.next) {\n        case 0:\n          if (unwrap === void 0) {\n            unwrap = false;\n          }\n          _context28.next = 3;\n          return result.deferredData.resolveData(signal);\n        case 3:\n          aborted = _context28.sent;\n          if (!aborted) {\n            _context28.next = 6;\n            break;\n          }\n          return _context28.abrupt(\"return\");\n        case 6:\n          if (!unwrap) {\n            _context28.next = 14;\n            break;\n          }\n          _context28.prev = 7;\n          return _context28.abrupt(\"return\", {\n            type: ResultType.data,\n            data: result.deferredData.unwrappedData\n          });\n        case 11:\n          _context28.prev = 11;\n          _context28.t0 = _context28[\"catch\"](7);\n          return _context28.abrupt(\"return\", {\n            type: ResultType.error,\n            error: _context28.t0\n          });\n        case 14:\n          return _context28.abrupt(\"return\", {\n            type: ResultType.data,\n            data: result.deferredData.data\n          });\n        case 15:\n        case \"end\":\n          return _context28.stop();\n      }\n    }, _callee25, null, [[7, 11]]);\n  }))).apply(this, arguments);\n}\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(function (v) {\n    return v === \"\";\n  });\n}\nfunction getTargetMatch(matches, location) {\n  var search = typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  var pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\nfunction getSubmissionFromNavigation(navigation) {\n  var formMethod = navigation.formMethod,\n    formAction = navigation.formAction,\n    formEncType = navigation.formEncType,\n    text = navigation.text,\n    formData = navigation.formData,\n    json = navigation.json;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n  if (text != null) {\n    return {\n      formMethod: formMethod,\n      formAction: formAction,\n      formEncType: formEncType,\n      formData: undefined,\n      json: undefined,\n      text: text\n    };\n  } else if (formData != null) {\n    return {\n      formMethod: formMethod,\n      formAction: formAction,\n      formEncType: formEncType,\n      formData: formData,\n      json: undefined,\n      text: undefined\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod: formMethod,\n      formAction: formAction,\n      formEncType: formEncType,\n      formData: undefined,\n      json: json,\n      text: undefined\n    };\n  }\n}\nfunction getLoadingNavigation(location, submission) {\n  if (submission) {\n    var navigation = {\n      state: \"loading\",\n      location: location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text\n    };\n    return navigation;\n  } else {\n    var _navigation = {\n      state: \"loading\",\n      location: location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined\n    };\n    return _navigation;\n  }\n}\nfunction getSubmittingNavigation(location, submission) {\n  var navigation = {\n    state: \"submitting\",\n    location: location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text\n  };\n  return navigation;\n}\nfunction getLoadingFetcher(submission, data) {\n  if (submission) {\n    var fetcher = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data: data\n    };\n    return fetcher;\n  } else {\n    var _fetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data: data\n    };\n    return _fetcher;\n  }\n}\nfunction getSubmittingFetcher(submission, existingFetcher) {\n  var fetcher = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined\n  };\n  return fetcher;\n}\nfunction getDoneFetcher(data) {\n  var fetcher = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data: data\n  };\n  return fetcher;\n}\nfunction restoreAppliedTransitions(_window, transitions) {\n  try {\n    var sessionPositions = _window.sessionStorage.getItem(TRANSITIONS_STORAGE_KEY);\n    if (sessionPositions) {\n      var _json2 = JSON.parse(sessionPositions);\n      for (var _i = 0, _Object$entries = Object.entries(_json2 || {}); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n          k = _Object$entries$_i[0],\n          v = _Object$entries$_i[1];\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\nfunction persistAppliedTransitions(_window, transitions) {\n  if (transitions.size > 0) {\n    var _json3 = {};\n    var _iterator9 = _createForOfIteratorHelper(transitions),\n      _step9;\n    try {\n      for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n        var _step9$value = _slicedToArray(_step9.value, 2),\n          k = _step9$value[0],\n          v = _step9$value[1];\n        _json3[k] = _toConsumableArray(v);\n      }\n    } catch (err) {\n      _iterator9.e(err);\n    } finally {\n      _iterator9.f();\n    }\n    try {\n      _window.sessionStorage.setItem(TRANSITIONS_STORAGE_KEY, JSON.stringify(_json3));\n    } catch (error) {\n      warning(false, \"Failed to save applied view transitions in sessionStorage (\" + error + \").\");\n    }\n  }\n}\n//#endregion\n\nexport { AbortedDeferredError, Action, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, ErrorResponseImpl as UNSAFE_ErrorResponseImpl, convertRouteMatchToUiMatch as UNSAFE_convertRouteMatchToUiMatch, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, decodePath as UNSAFE_decodePath, getResolveToMatches as UNSAFE_getResolveToMatches, invariant as UNSAFE_invariant, warning as UNSAFE_warning, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, defer, generatePath, getStaticContextFromError, getToPathname, isDataWithResponseInit, isDeferredData, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, redirectDocument, replace, resolvePath, resolveTo, stripBasename, data as unstable_data };","map":{"version":3,"names":["Action","PopStateEventType","createMemoryHistory","options","_options","_options$initialEntri","initialEntries","initialIndex","_options$v5Compat","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","key","location","createLocation","pathname","warning","charAt","JSON","stringify","createHref","createPath","history","createURL","URL","encodeLocation","path","parsePath","search","hash","push","Push","nextLocation","splice","delta","replace","Replace","go","nextIndex","listen","fn","createBrowserHistory","createBrowserLocation","window","globalHistory","_window$location","usr","createBrowserHref","getUrlBasedHistory","createHashHistory","createHashLocation","_parsePath","substr","_parsePath$pathname","_parsePath$search","_parsePath$hash","startsWith","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","invariant","value","message","Error","cond","console","warn","e","createKey","random","toString","getHistoryState","idx","current","_extends","_ref","_ref$pathname","_ref$search","_ref$hash","parsedPath","searchIndex","getLocation","validateLocation","_options2","_options2$window","defaultView","_options2$v5Compat","getIndex","replaceState","handlePop","historyState","pushState","error","DOMException","name","assign","origin","addEventListener","removeEventListener","ResultType","immutableRouteKeys","Set","isIndexRoute","route","convertRoutesToDataRoutes","routes","mapRouteProperties","parentPath","manifest","treePath","concat","_toConsumableArray","String","id","join","children","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","matchRoutesImpl","allowPartial","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","decoded","decodePath","matchRouteBranch","convertRouteMatchToUiMatch","match","loaderData","params","data","handle","parentsMeta","flattenRoute","relativePath","meta","caseSensitive","childrenIndex","joinPaths","routesMeta","score","computeScore","forEach","_route$path","includes","_iterator","_createForOfIteratorHelper","explodeOptionalSegments","_step","s","done","exploded","err","f","segments","split","_segments","_toArray","first","rest","isOptional","endsWith","required","restExploded","result","apply","subpath","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","matchPath","Object","pathnameBase","normalizePathname","generatePath","originalPath","prefix","p","array","isLastSegment","star","keyMatch","_keyMatch","_slicedToArray","optional","param","pattern","_compilePath","compilePath","_compilePath2","matcher","compiledParams","captureGroups","memo","paramName","splatValue","regexpSource","_","RegExp","v","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","_ref6","toPathname","_ref6$search","_ref6$hash","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","getPathContributingMatches","getResolveToMatches","v7_relativeSplatPath","pathMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","init","responseInit","status","headers","Headers","has","set","Response","DataWithResponseInit","_createClass","_classCallCheck","type","AbortedDeferredError","_Error","_inherits","_super","_createSuper","arguments","_wrapNativeSuper","DeferredData","_resolveData","_this","pendingKeysSet","subscribers","deferredKeys","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","_ref2","_ref7","_defineProperty","trackPromise","_this2","add","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","undefinedError","emit","settledKey","subscriber","subscribe","_this3","cancel","_this4","abort","k","resolveData","_x","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_this5","wrap","_callee$","_context","prev","next","resolve","sent","abrupt","stop","size","_ref3","_ref8","unwrapTrackedPromise","isTrackedPromise","_tracked","_error","_data","defer","redirect","redirectDocument","response","ErrorResponseImpl","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","text","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","defaultMapRouteProperties","hasErrorBoundary","Boolean","TRANSITIONS_STORAGE_KEY","createRouter","_navigate","_startNavigation","_handleAction","_handleLoaders","_handleFetcherAction","_handleFetcherLoader","_startRedirectNavigation","_callDataStrategy","_callLoadersAndMaybeResolveData","_discoverRoutes","routerWindow","isBrowser","createElement","isServer","detectErrorBoundary","dataRoutes","inFlightDataRoutes","dataStrategyImpl","unstable_dataStrategy","defaultDataStrategy","patchRoutesOnNavigationImpl","unstable_patchRoutesOnNavigation","future","v7_fetcherPersist","v7_normalizeFormMethod","v7_partialHydration","v7_prependBasename","v7_skipActionErrorRevalidation","unlistenHistory","discoveredRoutesMaxSize","discoveredRoutes","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","_getShortCircuitMatch","getShortCircuitMatches","fogOfWar","checkFogOfWar","active","initialized","m","lazy","loader","errors","isRouteInitialized","hydrate","findIndex","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","actionData","fetchers","Map","blockers","pendingAction","pendingPreventScrollReset","pendingNavigationController","pendingViewTransitionEnabled","appliedViewTransitions","removePageHideEventListener","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeFetchers","deletedFetchers","activeDeferreds","blockerFunctions","pendingPatchRoutes","ignoreNextHistoryUpdate","initialize","blockerKey","shouldBlockNavigation","currentLocation","updateBlocker","updateState","startNavigation","restoreAppliedTransitions","_saveAppliedTransitions","persistAppliedTransitions","initialHydration","dispose","clear","deleteFetcher","deleteBlocker","newState","opts","completedFetchers","deletedFetchersKeys","fetcher","unstable_viewTransitionOpts","viewTransitionOpts","unstable_flushSync","flushSync","completeNavigation","_temp","_location$state","_location$state2","_ref9","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","priorPaths","toPaths","getSavedScrollPosition","navigate","_x2","_x3","_callee2","normalizedPath","_normalizeNavigateOpt","submission","userReplace","_callee2$","_context2","normalizeTo","fromRouteId","relative","normalizeNavigateOptions","pendingError","enableViewTransition","unstable_viewTransition","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","_x4","_x5","_x6","_callee3","routesToUse","loadingNavigation","_handleNavigational","notFoundMatches","_route","request","pendingActionResult","actionResult","_actionResult$pending","routeId","_yield$handleLoaders","shortCircuited","updatedMatches","_callee3$","_context3","saveScrollPosition","handleNavigational404","isHashChangeOnly","createClientSideRequest","findNearestBoundary","handleAction","isErrorResult","getLoadingNavigation","handleLoaders","fetcherSubmission","getActionDataForCommit","_x7","_x8","_x9","_x10","_x11","_x12","_callee4","isFogOfWar","discoverResult","_handleDiscoverRouteE","boundaryId","_error2","_handleNavigational2","_error3","_route2","actionMatch","results","_replace","_location","boundaryMatch","_callee4$","_context4","getSubmittingNavigation","discoverRoutes","handleDiscoverRouteError","partialMatches","getTargetMatch","method","callDataStrategy","isRedirectResult","normalizeRedirectLocation","startRedirectNavigation","isDeferredResult","_x13","_x14","_x15","_x16","_x17","_x18","_x19","_x20","_x21","_x22","_x23","_callee5","activeSubmission","shouldUpdateNavigationState","_handleDiscoverRouteE2","_error4","_handleNavigational3","_error5","_route3","_getMatchesToLoad","_getMatchesToLoad2","matchesToLoad","revalidatingFetchers","_updatedFetchers","updates","_actionData","abortPendingFetchRevalidations","_yield$callLoadersAnd","loaderResults","fetcherResults","fetcherKey","_processLoaderData","updatedFetchers","didAbortFetchLoads","shouldUpdateFetchers","_callee5$","_context5","getSubmissionFromNavigation","getUpdatedActionData","getMatchesToLoad","cancelActiveDeferreds","markFetchRedirectsDone","getUpdatedRevalidatingFetchers","rf","abortFetcher","callLoadersAndMaybeResolveData","findRedirect","processLoaderData","deferredData","_ref11","_ref12","abortStaleFetchLoads","revalidatingFetcher","getLoadingFetcher","fetch","setFetcherError","_normalizeNavigateOpt2","handleFetcherAction","handleFetcherLoader","_x24","_x25","_x26","_x27","_x28","_x29","_x30","_x31","_callee6","requestMatches","detectAndHandle405Error","existingFetcher","abortController","fetchRequest","_handleDiscoverRouteE3","_error7","originatingLoadId","actionResults","revalidationRequest","loadId","loadFetcher","_getMatchesToLoad3","_getMatchesToLoad4","_yield$callLoadersAnd2","_processLoaderData2","doneFetcher","_callee6$","_context6","_detectAndHandle405Er","updateFetcherState","getSubmittingFetcher","getDoneFetcher","staleKey","_x32","_x33","_x34","_x35","_x36","_x37","_x38","_x39","_callee7","_handleDiscoverRouteE4","_error8","_callee7$","_context7","resolveDeferredData","t0","_x40","_x41","_x42","_callee8","_temp2","_ref14","redirectLocation","isDocumentReload","redirectHistoryAction","_state$navigation","_callee8$","_context8","_x43","_x44","_x45","_x46","_callee9","_callee9$","_context9","callDataStrategyImpl","all","isRedirectHandlerResult","normalizeRelativeRoutingRedirectResponse","convertHandlerResultToDataResult","_x47","_x48","_x49","_x50","_x51","_callee10","currentMatches","fetchersToLoad","_yield$Promise$all","_yield$Promise$all2","_callee10$","_context10","fetcherRequest","resolveDeferredResults","_cancelledDeferredRou","getFetcher","deleteFetcherAndUpdateState","count","markFetchersDone","_iterator2","_step2","doneKeys","_iterator3","_step3","landedId","yeetedKeys","_iterator4","_step4","_step4$value","getBlocker","blocker","newBlocker","_ref4","_entries","blockerFunction","_getShortCircuitMatch2","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","getScrollKey","fogMatches","_x52","_x53","_x54","_callee11","_loop","_ret","_callee11$","_context12","isNonHMR","newMatches","newPartialMatches","_loop$","_context11","loadLazyRouteChildren","finish","addToFifoQueue","delegateYield","queue","values","_internalSetRoutes","newRoutes","patchRoutes","patchRoutesImpl","_internalFetchControllers","_internalActiveDeferreds","UNSAFE_DEFERRED_SYMBOL","Symbol","createStaticHandler","_query","_queryRoute","_queryImpl","_submit","_loadRouteData","_callDataStrategy2","v7_throwAbortReason","query","_x55","_x56","_callee12","_temp3","_ref15","requestContext","skipLoaderErrorBubbling","_getShortCircuitMatch3","methodNotAllowedMatches","_error9","_getShortCircuitMatch4","_route4","_callee12$","_context13","isValidMethod","statusCode","loaderHeaders","actionHeaders","queryImpl","isResponse","queryRoute","_x57","_x58","_callee13","_temp4","_ref16","_result$activeDeferre","_callee13$","_context14","find","_x59","_x60","_x61","_x62","_x63","_x64","_x65","_callee14","routeMatch","_result","_callee14$","_context15","submit","loadRouteData","isHandlerResult","isRedirectResponse","_x66","_x67","_x68","_x69","_x70","_x71","_x72","_callee15","isRouteRequest","_error10","loaderRequest","_context16","context","_callee15$","_context17","throwStaticHandlerAbortedError","Location","Request","_x73","_x74","_x75","_x76","_x77","_x78","_x79","_callee16","executedLoaders","_callee16$","_context18","getLoaderMatchesUntilBoundary","processRouteLoaderData","fromEntries","_x80","_x81","_x82","_x83","_x84","_x85","_x86","_callee17","_callee17$","_context19","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","reason","isSubmissionNavigation","body","prependBasename","contextualMatches","activeRouteMatch","_iterator5","_step5","hasNakedIndexQuery","normalizeFormMethod","isFetcher","getInvalidBodyError","rawFormMethod","toUpperCase","stripHashFromPath","FormData","URLSearchParams","_ref5","_ref20","parse","searchParams","convertFormDataToSearchParams","convertSearchParamsToFormData","append","boundaryMatches","isInitialLoad","skipActionErrorRevalidation","currentUrl","nextUrl","actionStatus","shouldSkipRevalidation","navigationMatches","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","defaultShouldRevalidate","isNewRouteInstance","fetcherMatches","fetcherMatch","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","currentPath","loaderMatch","arg","routeChoice","_x87","_x88","_x89","_x90","_x91","_x92","_x93","_x94","_loadLazyRouteChildren","_callee18","pendingRouteChildren","pending","_callee18$","_context20","patch","isPromise","_route$children","dataChildren","_route$children2","loadLazyRouteModule","_x95","_x96","_x97","_loadLazyRouteModule","_callee19","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","staticRouteValue","isPropertyStaticallyDefined","_callee19$","_context21","_x98","_x99","_x100","_x101","_x102","_x103","_x104","_x105","_callDataStrategyImpl","_callee20","routeIdsToLoad","loadedMatches","_callee20$","_context22","shouldLoad","handlerOverride","callLoaderOrAction","_x106","_x107","_x108","_x109","_x110","_x111","_x112","_callLoaderOrAction","_callee22","staticContext","onReject","runHandler","handler","handlerError","_yield$Promise$all3","_yield$Promise$all4","_url","_pathname","_callee22$","_context24","actualHandler","ctx","handlerPromise","_callee21","val","_callee21$","_context23","_x113","_convertHandlerResultToDataResult","_callee23","handlerResult","_data2","contentType","_result$init2","_result$init","_result$init3","_result$init4","_result$init5","_result$init6","_callee23$","_context25","isDataWithResponseInit","isDeferredData","deferred","trimmedMatches","normalizedLocation","protocol","isSameBasename","_iterator6","_step6","_step6$value","_iterator7","_step7","_step7$value","foundError","_processRouteLoaderDa","_revalidatingFetchers","newLoaderData","mergedLoaderData","_iterator8","_step8","hasOwnProperty","eligibleMatches","reverse","_temp5","_ref22","errorMessage","_x114","_x115","_x116","_x117","_x118","_x119","_resolveDeferredResults","_callee24","signals","_loop2","_callee24$","_context27","isRevalidatingLoader","_loop2$","_context26","_x120","_x121","_x122","_resolveDeferredData","_callee25","unwrap","_callee25$","_context28","unwrappedData","getAll","_window","transitions","sessionPositions","sessionStorage","getItem","_i","_Object$entries","_Object$entries$_i","_iterator9","_step9","_step9$value","setItem"],"sources":["C:\\School\\3rd year\\cinemadine\\frontend\\node_modules\\@remix-run\\router\\history.ts","C:\\School\\3rd year\\cinemadine\\frontend\\node_modules\\@remix-run\\router\\utils.ts","C:\\School\\3rd year\\cinemadine\\frontend\\node_modules\\@remix-run\\router\\router.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n// TODO: (v7) Change the Location generic default from `any` to `unknown` and\n// remove Remix `useLocation` wrapper.\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location<State = any> extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: State;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. This may be either a URL or the pieces\n * of a URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport function warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    // Treating this as a full URL will strip any trailing spaces so we need to\n    // pre-encode them since they might be part of a matching splat param from\n    // an ancestor route\n    href = href.replace(/ $/, \"%20\");\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { invariant, parsePath, warning } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: unknown;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  // We keep the raw Response for redirects so we can return it verbatim\n  response: Response;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: unknown;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\n/**\n * Result from a loader or action called via dataStrategy\n */\nexport interface HandlerResult {\n  type: \"data\" | \"error\";\n  result: unknown; // data, Error, Response, DeferredData, DataWithResponseInit\n}\n\ntype LowerCaseFormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\ntype UpperCaseFormMethod = Uppercase<LowerCaseFormMethod>;\n\n/**\n * Users can specify either lowercase or uppercase form methods on `<Form>`,\n * useSubmit(), `<fetcher.Form>`, etc.\n */\nexport type HTMLFormMethod = LowerCaseFormMethod | UpperCaseFormMethod;\n\n/**\n * Active navigation/fetcher form methods are exposed in lowercase on the\n * RouterState\n */\nexport type FormMethod = LowerCaseFormMethod;\nexport type MutationFormMethod = Exclude<FormMethod, \"get\">;\n\n/**\n * In v7, active navigation/fetcher form methods are exposed in uppercase on the\n * RouterState.  This is to align with the normalization done via fetch().\n */\nexport type V7_FormMethod = UpperCaseFormMethod;\nexport type V7_MutationFormMethod = Exclude<V7_FormMethod, \"GET\">;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\"\n  | \"application/json\"\n  | \"text/plain\";\n\n// Thanks https://github.com/sindresorhus/type-fest!\ntype JsonObject = { [Key in string]: JsonValue } & {\n  [Key in string]?: JsonValue | undefined;\n};\ntype JsonArray = JsonValue[] | readonly JsonValue[];\ntype JsonPrimitive = string | number | boolean | null;\ntype JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport type Submission =\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: FormData;\n      json: undefined;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: JsonValue;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: undefined;\n      text: string;\n    };\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs<Context> {\n  request: Request;\n  params: Params;\n  context?: Context;\n}\n\n// TODO: (v7) Change the defaults from any to unknown in and remove Remix wrappers:\n//   ActionFunction, ActionFunctionArgs, LoaderFunction, LoaderFunctionArgs\n//   Also, make them a type alias instead of an interface\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Loaders and actions can return anything except `undefined` (`null` is a\n * valid return value if there is no data to return).  Responses are preferred\n * and will ease any future migration to Remix\n */\ntype DataFunctionValue = Response | NonNullable<unknown> | null;\n\ntype DataFunctionReturnValue = Promise<DataFunctionValue> | DataFunctionValue;\n\n/**\n * Route loader function signature\n */\nexport type LoaderFunction<Context = any> = {\n  (\n    args: LoaderFunctionArgs<Context>,\n    handlerCtx?: unknown\n  ): DataFunctionReturnValue;\n} & { hydrate?: boolean };\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction<Context = any> {\n  (\n    args: ActionFunctionArgs<Context>,\n    handlerCtx?: unknown\n  ): DataFunctionReturnValue;\n}\n\n/**\n * Arguments passed to shouldRevalidate function\n */\nexport interface ShouldRevalidateFunctionArgs {\n  currentUrl: URL;\n  currentParams: AgnosticDataRouteMatch[\"params\"];\n  nextUrl: URL;\n  nextParams: AgnosticDataRouteMatch[\"params\"];\n  formMethod?: Submission[\"formMethod\"];\n  formAction?: Submission[\"formAction\"];\n  formEncType?: Submission[\"formEncType\"];\n  text?: Submission[\"text\"];\n  formData?: Submission[\"formData\"];\n  json?: Submission[\"json\"];\n  actionStatus?: number;\n  actionResult?: any;\n  defaultShouldRevalidate: boolean;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: ShouldRevalidateFunctionArgs): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set `hasErrorBoundary`\n * from the framework-aware `errorElement` prop\n *\n * @deprecated Use `mapRouteProperties` instead\n */\nexport interface DetectErrorBoundaryFunction {\n  (route: AgnosticRouteObject): boolean;\n}\n\nexport interface DataStrategyMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {\n  shouldLoad: boolean;\n  resolve: (\n    handlerOverride?: (\n      handler: (ctx?: unknown) => DataFunctionReturnValue\n    ) => Promise<HandlerResult>\n  ) => Promise<HandlerResult>;\n}\n\nexport interface DataStrategyFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {\n  matches: DataStrategyMatch[];\n}\n\nexport interface DataStrategyFunction {\n  (args: DataStrategyFunctionArgs): Promise<HandlerResult[]>;\n}\n\nexport interface AgnosticPatchRoutesOnNavigationFunction<\n  M extends AgnosticRouteMatch = AgnosticRouteMatch\n> {\n  (opts: {\n    path: string;\n    matches: M[];\n    patch: (routeId: string | null, children: AgnosticRouteObject[]) => void;\n  }): void | Promise<void>;\n}\n\n/**\n * Function provided by the framework-aware layers to set any framework-specific\n * properties from framework-agnostic properties\n */\nexport interface MapRoutePropertiesFunction {\n  (route: AgnosticRouteObject): {\n    hasErrorBoundary: boolean;\n  } & Record<string, any>;\n}\n\n/**\n * Keys we cannot change from within a lazy() function. We spread all other keys\n * onto the route. Either they're meaningful to the router, or they'll get\n * ignored.\n */\nexport type ImmutableRouteKey =\n  | \"lazy\"\n  | \"caseSensitive\"\n  | \"path\"\n  | \"id\"\n  | \"index\"\n  | \"children\";\n\nexport const immutableRouteKeys = new Set<ImmutableRouteKey>([\n  \"lazy\",\n  \"caseSensitive\",\n  \"path\",\n  \"id\",\n  \"index\",\n  \"children\",\n]);\n\ntype RequireOne<T, Key = keyof T> = Exclude<\n  {\n    [K in keyof T]: K extends Key ? Omit<T, K> & Required<Pick<T, K>> : never;\n  }[keyof T],\n  undefined\n>;\n\n/**\n * lazy() function to load a route definition, which can add non-matching\n * related properties to a route\n */\nexport interface LazyRouteFunction<R extends AgnosticRouteObject> {\n  (): Promise<RequireOne<Omit<R, ImmutableRouteKey>>>;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction | boolean;\n  action?: ActionFunction | boolean;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n  lazy?: LazyRouteFunction<AgnosticBaseRouteObject>;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\nexport type RouteManifest = Record<string, AgnosticDataRouteObject | undefined>;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\nexport type PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\" | \"/*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise, return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if you could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  mapRouteProperties: MapRoutePropertiesFunction,\n  parentPath: string[] = [],\n  manifest: RouteManifest = {}\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, String(index)];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !manifest[id],\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n      };\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n        children: undefined,\n      };\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(\n          route.children,\n          mapRouteProperties,\n          treePath,\n          manifest\n        );\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  return matchRoutesImpl(routes, locationArg, basename, false);\n}\n\nexport function matchRoutesImpl<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename: string,\n  allowPartial: boolean\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    let decoded = decodePath(pathname);\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      decoded,\n      allowPartial\n    );\n  }\n\n  return matches;\n}\n\nexport interface UIMatch<Data = unknown, Handle = unknown> {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: Data;\n  handle: Handle;\n}\n\nexport function convertRouteMatchToUiMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UIMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle,\n  };\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:[\\w-]+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string,\n  allowPartial = false\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    let route = meta.route;\n\n    if (\n      !match &&\n      end &&\n      allowPartial &&\n      !routesMeta[routesMeta.length - 1].route.index\n    ) {\n      match = matchPath(\n        {\n          path: meta.relativePath,\n          caseSensitive: meta.caseSensitive,\n          end: false,\n        },\n        remainingPathname\n      );\n    }\n\n    if (!match) {\n      return null;\n    }\n\n    Object.assign(matchedParams, match.params);\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path: string = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const stringify = (p: any) =>\n    p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n\n  const segments = path\n    .split(/\\/+/)\n    .map((segment, index, array) => {\n      const isLastSegment = index === array.length - 1;\n\n      // only apply the splat if it's the last segment\n      if (isLastSegment && segment === \"*\") {\n        const star = \"*\" as PathParam<Path>;\n        // Apply the splat\n        return stringify(params[star]);\n      }\n\n      const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n      if (keyMatch) {\n        const [, key, optional] = keyMatch;\n        let param = params[key as PathParam<Path>];\n        invariant(optional === \"?\" || param != null, `Missing \":${key}\" param`);\n        return stringify(param);\n      }\n\n      // Remove any optional markers from optional static segments\n      return segment.replace(/\\?$/g, \"\");\n    })\n    // Remove empty segments\n    .filter((segment) => !!segment);\n\n  return prefix + segments.join(\"/\");\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, compiledParams] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = compiledParams.reduce<Mutable<Params>>(\n    (memo, { paramName, isOptional }, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      const value = captureGroups[index];\n      if (isOptional && !value) {\n        memo[paramName] = undefined;\n      } else {\n        memo[paramName] = (value || \"\").replace(/%2F/g, \"/\");\n      }\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\ntype CompiledPathParam = { paramName: string; isOptional?: boolean };\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, CompiledPathParam[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let params: CompiledPathParam[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(\n        /\\/:([\\w-]+)(\\?)?/g,\n        (_: string, paramName: string, isOptional) => {\n          params.push({ paramName, isOptional: isOptional != null });\n          return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n        }\n      );\n\n  if (path.endsWith(\"*\")) {\n    params.push({ paramName: \"*\" });\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, params];\n}\n\nexport function decodePath(value: string) {\n  try {\n    return value\n      .split(\"/\")\n      .map((v) => decodeURIComponent(v).replace(/\\//g, \"%2F\"))\n      .join(\"/\");\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nexport function getResolveToMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[], v7_relativeSplatPath: boolean) {\n  let pathMatches = getPathContributingMatches(matches);\n\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) =>\n      idx === pathMatches.length - 1 ? match.pathname : match.pathnameBase\n    );\n  }\n\n  return pathMatches.map((match) => match.pathnameBase);\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport class DataWithResponseInit<D> {\n  type: string = \"DataWithResponseInit\";\n  data: D;\n  init: ResponseInit | null;\n\n  constructor(data: D, init?: ResponseInit) {\n    this.data = data;\n    this.init = init || null;\n  }\n}\n\n/**\n * Create \"responses\" that contain `status`/`headers` without forcing\n * serialization into an actual `Response` - used by Remix single fetch\n */\nexport function data<D>(data: D, init?: number | ResponseInit) {\n  return new DataWithResponseInit(\n    data,\n    typeof init === \"number\" ? { status: init } : init\n  );\n}\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, undefined, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\n        `Deferred data for key \"${key}\" resolved/rejected with \\`undefined\\`, ` +\n          `you must resolve/reject with a value or \\`null\\`.`\n      );\n      Object.defineProperty(promise, \"_error\", { get: () => undefinedError });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirectDocument: RedirectFunction = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n\n/**\n * A redirect response that will perform a `history.replaceState` instead of a\n * `history.pushState` for client-side navigation redirects.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const replace: RedirectFunction = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Replace\", \"true\");\n  return response;\n};\n\nexport type ErrorResponse = {\n  status: number;\n  statusText: string;\n  data: any;\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nexport class ErrorResponseImpl implements ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  private error?: Error;\n  private internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n  warning,\n} from \"./history\";\nimport type {\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DataStrategyMatch,\n  AgnosticRouteObject,\n  DataResult,\n  DataStrategyFunction,\n  DataStrategyFunctionArgs,\n  DeferredData,\n  DeferredResult,\n  DetectErrorBoundaryFunction,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  HTMLFormMethod,\n  HandlerResult,\n  ImmutableRouteKey,\n  MapRoutePropertiesFunction,\n  MutationFormMethod,\n  RedirectResult,\n  RouteData,\n  RouteManifest,\n  ShouldRevalidateFunctionArgs,\n  Submission,\n  SuccessResult,\n  UIMatch,\n  V7_FormMethod,\n  V7_MutationFormMethod,\n  AgnosticPatchRoutesOnNavigationFunction,\n  DataWithResponseInit,\n} from \"./utils\";\nimport {\n  ErrorResponseImpl,\n  ResultType,\n  convertRouteMatchToUiMatch,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  getResolveToMatches,\n  immutableRouteKeys,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  matchRoutesImpl,\n  resolveTo,\n  stripBasename,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the future config for the router\n   */\n  get future(): FutureConfig;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the window associated with the router\n   */\n  get window(): RouterInit[\"window\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To | null, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE DO NOT USE\n   *\n   * Patch additional children routes into an existing parent route\n   * @param routeId The parent route id or a callback function accepting `patch`\n   *                to perform batch patching\n   * @param children The additional children routes\n   */\n  patchRoutes(routeId: string | null, children: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * HMR needs to pass in-flight route updates to React Router\n   * TODO: Replace this with granular route update APIs (addRoute, updateRoute, deleteRoute)\n   */\n  _internalSetRoutes(routes: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface FutureConfig {\n  v7_fetcherPersist: boolean;\n  v7_normalizeFormMethod: boolean;\n  v7_partialHydration: boolean;\n  v7_prependBasename: boolean;\n  v7_relativeSplatPath: boolean;\n  v7_skipActionErrorRevalidation: boolean;\n}\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  routes: AgnosticRouteObject[];\n  history: History;\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<FutureConfig>;\n  hydrationData?: HydrationState;\n  window?: Window;\n  unstable_patchRoutesOnNavigation?: AgnosticPatchRoutesOnNavigationFunction;\n  unstable_dataStrategy?: DataStrategyFunction;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: {\n      requestContext?: unknown;\n      skipLoaderErrorBubbling?: boolean;\n      unstable_dataStrategy?: DataStrategyFunction;\n    }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: {\n      routeId?: string;\n      requestContext?: unknown;\n      unstable_dataStrategy?: DataStrategyFunction;\n    }\n  ): Promise<any>;\n}\n\ntype ViewTransitionOpts = {\n  currentLocation: Location;\n  nextLocation: Location;\n};\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (\n    state: RouterState,\n    opts: {\n      deletedFetchers: string[];\n      unstable_viewTransitionOpts?: ViewTransitionOpts;\n      unstable_flushSync: boolean;\n    }\n  ): void;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UIMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\nexport type RelativeRoutingType = \"route\" | \"path\";\n\n// Allowed for any navigation or fetch\ntype BaseNavigateOrFetchOptions = {\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  unstable_flushSync?: boolean;\n};\n\n// Only allowed for navigations\ntype BaseNavigateOptions = BaseNavigateOrFetchOptions & {\n  replace?: boolean;\n  state?: any;\n  fromRouteId?: string;\n  unstable_viewTransition?: boolean;\n};\n\n// Only allowed for submission navigations\ntype BaseSubmissionOptions = {\n  formMethod?: HTMLFormMethod;\n  formEncType?: FormEncType;\n} & (\n  | { formData: FormData; body?: undefined }\n  | { formData?: undefined; body: any }\n);\n\n/**\n * Options for a navigate() call for a normal (non-submission) navigation\n */\ntype LinkNavigateOptions = BaseNavigateOptions;\n\n/**\n * Options for a navigate() call for a submission navigation\n */\ntype SubmissionNavigateOptions = BaseNavigateOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to navigate() for a navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options for a fetch() load\n */\ntype LoadFetchOptions = BaseNavigateOrFetchOptions;\n\n/**\n * Options for a fetch() submission\n */\ntype SubmitFetchOptions = BaseNavigateOrFetchOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions = LoadFetchOptions | SubmitFetchOptions;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    json: undefined;\n    text: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    text: Submission[\"text\"];\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    text: undefined;\n    formData: undefined;\n    json: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    text: Submission[\"text\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ntype PendingActionResult = [string, SuccessResult | ErrorResult];\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Route matches which may have been updated from fog of war discovery\n   */\n  matches?: RouterState[\"matches\"];\n  /**\n   * Tuple for the returned or thrown value from the current action.  The routeId\n   * is the action route for success and the bubbled boundary route for errors.\n   */\n  pendingActionResult?: PendingActionResult;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * Route matches which may have been updated from fog of war discovery\n   */\n  matches?: RouterState[\"matches\"];\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n  match: AgnosticDataRouteMatch | null;\n  matches: AgnosticDataRouteMatch[] | null;\n  controller: AbortController | null;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst defaultMapRouteProperties: MapRoutePropertiesFunction = (route) => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary),\n});\n\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  const routerWindow = init.window\n    ? init.window\n    : typeof window !== \"undefined\"\n    ? window\n    : undefined;\n  const isBrowser =\n    typeof routerWindow !== \"undefined\" &&\n    typeof routerWindow.document !== \"undefined\" &&\n    typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  // Routes keyed by ID\n  let manifest: RouteManifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(\n    init.routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n  let inFlightDataRoutes: AgnosticDataRouteObject[] | undefined;\n  let basename = init.basename || \"/\";\n  let dataStrategyImpl = init.unstable_dataStrategy || defaultDataStrategy;\n  let patchRoutesOnNavigationImpl = init.unstable_patchRoutesOnNavigation;\n\n  // Config driven behavior flags\n  let future: FutureConfig = {\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false,\n    v7_skipActionErrorRevalidation: false,\n    ...init.future,\n  };\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // FIFO queue of previously discovered routes to prevent re-calling on\n  // subsequent navigations to the same path\n  let discoveredRoutesMaxSize = 1000;\n  let discoveredRoutes = new Set<string>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null && !patchRoutesOnNavigationImpl) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  // In SPA apps, if the user provided a patchRoutesOnNavigation implementation and\n  // our initial match is a splat route, clear them out so we run through lazy\n  // discovery on hydration in case there's a more accurate lazy route match.\n  // In SSR apps (with `hydrationData`), we expect that the server will send\n  // up the proper matched routes so we don't want to run lazy discovery on\n  // initial hydration and want to hydrate into the splat route.\n  if (initialMatches && !init.hydrationData) {\n    let fogOfWar = checkFogOfWar(\n      initialMatches,\n      dataRoutes,\n      init.history.location.pathname\n    );\n    if (fogOfWar.active) {\n      initialMatches = null;\n    }\n  }\n\n  let initialized: boolean;\n  if (!initialMatches) {\n    initialized = false;\n    initialMatches = [];\n\n    // If partial hydration and fog of war is enabled, we will be running\n    // `patchRoutesOnNavigation` during hydration so include any partial matches as\n    // the initial matches so we can properly render `HydrateFallback`'s\n    if (future.v7_partialHydration) {\n      let fogOfWar = checkFogOfWar(\n        null,\n        dataRoutes,\n        init.history.location.pathname\n      );\n      if (fogOfWar.active && fogOfWar.matches) {\n        initialMatches = fogOfWar.matches;\n      }\n    }\n  } else if (initialMatches.some((m) => m.route.lazy)) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!initialMatches.some((m) => m.route.loader)) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    let isRouteInitialized = (m: AgnosticDataRouteMatch) => {\n      // No loader, nothing to initialize\n      if (!m.route.loader) {\n        return true;\n      }\n      // Explicitly opting-in to running on hydration\n      if (\n        typeof m.route.loader === \"function\" &&\n        m.route.loader.hydrate === true\n      ) {\n        return false;\n      }\n      // Otherwise, initialized if hydrated with data or an error\n      return (\n        (loaderData && loaderData[m.route.id] !== undefined) ||\n        (errors && errors[m.route.id] !== undefined)\n      );\n    };\n\n    // If errors exist, don't consider routes below the boundary\n    if (errors) {\n      let idx = initialMatches.findIndex(\n        (m) => errors![m.route.id] !== undefined\n      );\n      initialized = initialMatches.slice(0, idx + 1).every(isRouteInitialized);\n    } else {\n      initialized = initialMatches.every(isRouteInitialized);\n    }\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions: Map<string, Set<string>> = new Map<\n    string,\n    Set<string>\n  >();\n\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener: (() => void) | null = null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: Set<string> = new Set();\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map<string, number>();\n\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set<string>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Map of pending patchRoutesOnNavigation() promises (keyed by path/matches) so\n  // that we only kick them off once for a given combo\n  let pendingPatchRoutes = new Map<\n    string,\n    ReturnType<AgnosticPatchRoutesOnNavigationFunction>\n  >();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (ignoreNextHistoryUpdate) {\n          ignoreNextHistoryUpdate = false;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          ignoreNextHistoryUpdate = true;\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked\n              init.history.go(delta);\n            },\n            reset() {\n              let blockers = new Map(state.blockers);\n              blockers.set(blockerKey!, IDLE_BLOCKER);\n              updateState({ blockers });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () =>\n        persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () =>\n        routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location, {\n        initialHydration: true,\n      });\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(\n    newState: Partial<RouterState>,\n    opts: {\n      flushSync?: boolean;\n      viewTransitionOpts?: ViewTransitionOpts;\n    } = {}\n  ): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers: string[] = [];\n    let deletedFetchersKeys: string[] = [];\n\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    [...subscribers].forEach((subscriber) =>\n      subscriber(state, {\n        deletedFetchers: deletedFetchersKeys,\n        unstable_viewTransitionOpts: opts.viewTransitionOpts,\n        unstable_flushSync: opts.flushSync === true,\n      })\n    );\n\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach((key) => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach((key) => deleteFetcher(key));\n    }\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>,\n    { flushSync }: { flushSync?: boolean } = {}\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    // Commit any in-flight routes at the end of the HMR revalidation \"navigation\"\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    let viewTransitionOpts: ViewTransitionOpts | undefined;\n\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === HistoryAction.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location,\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location,\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set<string>([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location,\n      };\n    }\n\n    updateState(\n      {\n        ...newState, // matches, errors, fetchers go through as-is\n        actionData,\n        loaderData,\n        historyAction: pendingAction,\n        location,\n        initialized: true,\n        navigation: IDLE_NAVIGATION,\n        revalidation: \"idle\",\n        restoreScrollPosition: getSavedScrollPosition(\n          location,\n          newState.matches || state.matches\n        ),\n        preventScrollReset,\n        blockers,\n      },\n      {\n        viewTransitionOpts,\n        flushSync: flushSync === true,\n      }\n    );\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To | null,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      to,\n      future.v7_relativeSplatPath,\n      opts?.fromRouteId,\n      opts?.relative\n    );\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      false,\n      normalizedPath,\n      opts\n    );\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey!, IDLE_BLOCKER);\n          updateState({ blockers });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.unstable_viewTransition,\n      flushSync,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      initialHydration?: boolean;\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponseImpl;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n      enableViewTransition?: boolean;\n      flushSync?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n\n    let fogOfWar = checkFogOfWar(matches, routesToUse, location.pathname);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let { error, notFoundMatches, route } = handleNavigational404(\n        location.pathname\n      );\n      completeNavigation(\n        location,\n        {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error,\n          },\n        },\n        { flushSync }\n      );\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (\n      state.initialized &&\n      !isRevalidationRequired &&\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches }, { flushSync });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionResult: PendingActionResult | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingActionResult = [\n        findNearestBoundary(matches).route.id,\n        { type: ResultType.error, error: opts.pendingError },\n      ];\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionResult = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        fogOfWar.active,\n        { replace: opts.replace, flushSync }\n      );\n\n      if (actionResult.shortCircuited) {\n        return;\n      }\n\n      // If we received a 404 from handleAction, it's because we couldn't lazily\n      // discover the destination route so we don't want to call loaders\n      if (actionResult.pendingActionResult) {\n        let [routeId, result] = actionResult.pendingActionResult;\n        if (\n          isErrorResult(result) &&\n          isRouteErrorResponse(result.error) &&\n          result.error.status === 404\n        ) {\n          pendingNavigationController = null;\n\n          completeNavigation(location, {\n            matches: actionResult.matches,\n            loaderData: {},\n            errors: {\n              [routeId]: result.error,\n            },\n          });\n          return;\n        }\n      }\n\n      matches = actionResult.matches || matches;\n      pendingActionResult = actionResult.pendingActionResult;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n      // No need to do fog of war matching again on loader execution\n      fogOfWar.active = false;\n\n      // Create a GET request for the loaders\n      request = createClientSideRequest(\n        init.history,\n        request.url,\n        request.signal\n      );\n    }\n\n    // Call loaders\n    let {\n      shortCircuited,\n      matches: updatedMatches,\n      loaderData,\n      errors,\n    } = await handleLoaders(\n      request,\n      location,\n      matches,\n      fogOfWar.active,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.fetcherSubmission,\n      opts && opts.replace,\n      opts && opts.initialHydration === true,\n      flushSync,\n      pendingActionResult\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches: updatedMatches || matches,\n      ...getActionDataForCommit(pendingActionResult),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    opts: { replace?: boolean; flushSync?: boolean } = {}\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({ navigation }, { flushSync: opts.flushSync === true });\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        matches,\n        location.pathname,\n        request.signal\n      );\n      if (discoverResult.type === \"aborted\") {\n        return { shortCircuited: true };\n      } else if (discoverResult.type === \"error\") {\n        let { boundaryId, error } = handleDiscoverRouteError(\n          location.pathname,\n          discoverResult\n        );\n        return {\n          matches: discoverResult.partialMatches,\n          pendingActionResult: [\n            boundaryId,\n            {\n              type: ResultType.error,\n              error,\n            },\n          ],\n        };\n      } else if (!discoverResult.matches) {\n        let { notFoundMatches, error, route } = handleNavigational404(\n          location.pathname\n        );\n        return {\n          matches: notFoundMatches,\n          pendingActionResult: [\n            route.id,\n            {\n              type: ResultType.error,\n              error,\n            },\n          ],\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      let results = await callDataStrategy(\n        \"action\",\n        request,\n        [actionMatch],\n        matches\n      );\n      result = results[0];\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        let location = normalizeRedirectLocation(\n          result.response.headers.get(\"Location\")!,\n          new URL(request.url),\n          basename\n        );\n        replace = location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(request, result, {\n        submission,\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions to the current location are REPLACE\n      // navigations, but if the action threw an error that'll be rendered in\n      // an errorElement, we fall back to PUSH so that the user can use the\n      // back button to get back to the pre-submission form location to try\n      // again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        matches,\n        pendingActionResult: [boundaryMatch.route.id, result],\n      };\n    }\n\n    return {\n      matches,\n      pendingActionResult: [actionMatch.route.id, result],\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    fetcherSubmission?: Submission,\n    replace?: boolean,\n    initialHydration?: boolean,\n    flushSync?: boolean,\n    pendingActionResult?: PendingActionResult\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation =\n      overrideNavigation || getLoadingNavigation(location, submission);\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission =\n      submission ||\n      fetcherSubmission ||\n      getSubmissionFromNavigation(loadingNavigation);\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since it's not a \"navigation\"\n    let shouldUpdateNavigationState =\n      !isUninterruptedRevalidation &&\n      (!future.v7_partialHydration || !initialHydration);\n\n    // When fog of war is enabled, we enter our `loading` state earlier so we\n    // can discover new routes during the `loading` state.  We skip this if\n    // we've already run actions since we would have done our matching already.\n    // If the children() function threw then, we want to proceed with the\n    // partial matches it discovered.\n    if (isFogOfWar) {\n      if (shouldUpdateNavigationState) {\n        let actionData = getUpdatedActionData(pendingActionResult);\n        updateState(\n          {\n            navigation: loadingNavigation,\n            ...(actionData !== undefined ? { actionData } : {}),\n          },\n          {\n            flushSync,\n          }\n        );\n      }\n\n      let discoverResult = await discoverRoutes(\n        matches,\n        location.pathname,\n        request.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return { shortCircuited: true };\n      } else if (discoverResult.type === \"error\") {\n        let { boundaryId, error } = handleDiscoverRouteError(\n          location.pathname,\n          discoverResult\n        );\n        return {\n          matches: discoverResult.partialMatches,\n          loaderData: {},\n          errors: {\n            [boundaryId]: error,\n          },\n        };\n      } else if (!discoverResult.matches) {\n        let { error, notFoundMatches, route } = handleNavigational404(\n          location.pathname\n        );\n        return {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error,\n          },\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      future.v7_partialHydration && initialHydration === true,\n      future.v7_skipActionErrorRevalidation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      pendingActionResult\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(\n        location,\n        {\n          matches,\n          loaderData: {},\n          // Commit pending error if we're short circuiting\n          errors:\n            pendingActionResult && isErrorResult(pendingActionResult[1])\n              ? { [pendingActionResult[0]]: pendingActionResult[1].error }\n              : null,\n          ...getActionDataForCommit(pendingActionResult),\n          ...(updatedFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n        },\n        { flushSync }\n      );\n      return { shortCircuited: true };\n    }\n\n    if (shouldUpdateNavigationState) {\n      let updates: Partial<RouterState> = {};\n      if (!isFogOfWar) {\n        // Only update navigation/actionNData if we didn't already do it above\n        updates.navigation = loadingNavigation;\n        let actionData = getUpdatedActionData(pendingActionResult);\n        if (actionData !== undefined) {\n          updates.actionData = actionData;\n        }\n      }\n      if (revalidatingFetchers.length > 0) {\n        updates.fetchers = getUpdatedRevalidatingFetchers(revalidatingFetchers);\n      }\n      updateState(updates, { flushSync });\n    }\n\n    revalidatingFetchers.forEach((rf) => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((f) => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n\n    let { loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect([...loaderResults, ...fetcherResults]);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey =\n          revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      await startRedirectNavigation(request, redirect.result, {\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingActionResult,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    // During partial hydration, preserve SSR errors for routes that don't re-run\n    if (future.v7_partialHydration && initialHydration && state.errors) {\n      Object.entries(state.errors)\n        .filter(([id]) => !matchesToLoad.some((m) => m.route.id === id))\n        .forEach(([routeId, error]) => {\n          errors = Object.assign(errors || {}, { [routeId]: error });\n        });\n    }\n\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers =\n      updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n\n    return {\n      matches,\n      loaderData,\n      errors,\n      ...(shouldUpdateFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n    };\n  }\n\n  function getUpdatedActionData(\n    pendingActionResult: PendingActionResult | undefined\n  ): Record<string, RouteData> | null | undefined {\n    if (pendingActionResult && !isErrorResult(pendingActionResult[1])) {\n      // This is cast to `any` currently because `RouteData`uses any and it\n      // would be a breaking change to use any.\n      // TODO: v7 - change `RouteData` to use `unknown` instead of `any`\n      return {\n        [pendingActionResult[0]]: pendingActionResult[1].data as any,\n      };\n    } else if (state.actionData) {\n      if (Object.keys(state.actionData).length === 0) {\n        return null;\n      } else {\n        return state.actionData;\n      }\n    }\n  }\n\n  function getUpdatedRevalidatingFetchers(\n    revalidatingFetchers: RevalidatingFetcher[]\n  ) {\n    revalidatingFetchers.forEach((rf) => {\n      let fetcher = state.fetchers.get(rf.key);\n      let revalidatingFetcher = getLoadingFetcher(\n        undefined,\n        fetcher ? fetcher.data : undefined\n      );\n      state.fetchers.set(rf.key, revalidatingFetcher);\n    });\n    return new Map(state.fetchers);\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      href,\n      future.v7_relativeSplatPath,\n      routeId,\n      opts?.relative\n    );\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n\n    let fogOfWar = checkFogOfWar(matches, routesToUse, normalizedPath);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: normalizedPath }),\n        { flushSync }\n      );\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      true,\n      normalizedPath,\n      opts\n    );\n\n    if (error) {\n      setFetcherError(key, routeId, error, { flushSync });\n      return;\n    }\n\n    let match = getTargetMatch(matches, path);\n\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(\n        key,\n        routeId,\n        path,\n        match,\n        matches,\n        fogOfWar.active,\n        flushSync,\n        submission\n      );\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path });\n    handleFetcherLoader(\n      key,\n      routeId,\n      path,\n      match,\n      matches,\n      fogOfWar.active,\n      flushSync,\n      submission\n    );\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    flushSync: boolean,\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    function detectAndHandle405Error(m: AgnosticDataRouteMatch) {\n      if (!m.route.action && !m.route.lazy) {\n        let error = getInternalRouterError(405, {\n          method: submission.formMethod,\n          pathname: path,\n          routeId: routeId,\n        });\n        setFetcherError(key, routeId, error, { flushSync });\n        return true;\n      }\n      return false;\n    }\n\n    if (!isFogOfWar && detectAndHandle405Error(match)) {\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync,\n    });\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        requestMatches,\n        path,\n        fetchRequest.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        let { error } = handleDiscoverRouteError(path, discoverResult);\n        setFetcherError(key, routeId, error, { flushSync });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(\n          key,\n          routeId,\n          getInternalRouterError(404, { pathname: path }),\n          { flushSync }\n        );\n        return;\n      } else {\n        requestMatches = discoverResult.matches;\n        match = getTargetMatch(requestMatches, path);\n\n        if (detectAndHandle405Error(match)) {\n          return;\n        }\n      }\n    }\n\n    // Call the action for the fetcher\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let actionResults = await callDataStrategy(\n      \"action\",\n      fetchRequest,\n      [match],\n      requestMatches\n    );\n    let actionResult = actionResults[0];\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    // When using v7_fetcherPersist, we don't want errors bubbling up to the UI\n    // or redirects processed for unmounted fetchers so we just revert them to\n    // idle\n    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      }\n      // Let SuccessResult's fall through for revalidation\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n        if (pendingNavigationLoadId > originatingLoadId) {\n          // A new navigation was kicked off after our action started, so that\n          // should take precedence over this redirect navigation.  We already\n          // set isRevalidationRequired so all loaders for the new route should\n          // fire unless opted out via shouldRevalidate\n          updateFetcherState(key, getDoneFetcher(undefined));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(fetchRequest, actionResult, {\n            fetcherSubmission: submission,\n          });\n        }\n      }\n\n      // Process any non-redirect errors thrown\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n      nextLocation,\n      abortController.signal\n    );\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(routesToUse, state.navigation.location, basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      false,\n      future.v7_skipActionErrorRevalidation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      [match.route.id, actionResult]\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          existingFetcher ? existingFetcher.data : undefined\n        );\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        if (fetchControllers.has(staleKey)) {\n          abortFetcher(staleKey);\n        }\n        if (rf.controller) {\n          fetchControllers.set(staleKey, rf.controller);\n        }\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));\n\n    abortController.signal.addEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    let { loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    abortController.signal.removeEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect([...loaderResults, ...fetcherResults]);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey =\n          revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      return startRedirectNavigation(revalidationRequest, redirect.result);\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n\n    abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        fetchers: new Map(state.fetchers),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    flushSync: boolean,\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(\n      key,\n      getLoadingFetcher(\n        submission,\n        existingFetcher ? existingFetcher.data : undefined\n      ),\n      { flushSync }\n    );\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        matches,\n        path,\n        fetchRequest.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        let { error } = handleDiscoverRouteError(path, discoverResult);\n        setFetcherError(key, routeId, error, { flushSync });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(\n          key,\n          routeId,\n          getInternalRouterError(404, { pathname: path }),\n          { flushSync }\n        );\n        return;\n      } else {\n        matches = discoverResult.matches;\n        match = getTargetMatch(matches, path);\n      }\n    }\n\n    // Call the loader for this fetcher route match\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let results = await callDataStrategy(\n      \"loader\",\n      fetchRequest,\n      [match],\n      matches\n    );\n    let result = results[0];\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // We don't want errors bubbling up or redirects followed for unmounted\n    // fetchers, so short circuit here if it was removed from the UI\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(fetchRequest, result);\n        return;\n      }\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    request: Request,\n    redirect: RedirectResult,\n    {\n      submission,\n      fetcherSubmission,\n      replace,\n    }: {\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      replace?: boolean;\n    } = {}\n  ) {\n    if (redirect.response.headers.has(\"X-Remix-Revalidate\")) {\n      isRevalidationRequired = true;\n    }\n\n    let location = redirect.response.headers.get(\"Location\");\n    invariant(location, \"Expected a Location header on the redirect Response\");\n    location = normalizeRedirectLocation(\n      location,\n      new URL(request.url),\n      basename\n    );\n    let redirectLocation = createLocation(state.location, location, {\n      _isRedirect: true,\n    });\n\n    if (isBrowser) {\n      let isDocumentReload = false;\n\n      if (redirect.response.headers.has(\"X-Remix-Reload-Document\")) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(location)) {\n        const url = init.history.createURL(location);\n        isDocumentReload =\n          // Hard reload if it's an absolute URL to a new origin\n          url.origin !== routerWindow.location.origin ||\n          // Hard reload if it's an absolute URL that does not match our basename\n          stripBasename(url.pathname, basename) == null;\n      }\n\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(location);\n        } else {\n          routerWindow.location.assign(location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true || redirect.response.headers.has(\"X-Remix-Replace\")\n        ? HistoryAction.Replace\n        : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType } = state.navigation;\n    if (\n      !submission &&\n      !fetcherSubmission &&\n      formMethod &&\n      formAction &&\n      formEncType\n    ) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.response.status) &&\n      activeSubmission &&\n      isMutationMethod(activeSubmission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...activeSubmission,\n          formAction: location,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(\n        redirectLocation,\n        submission\n      );\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    }\n  }\n\n  // Utility wrapper for calling dataStrategy client-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(\n    type: \"loader\" | \"action\",\n    request: Request,\n    matchesToLoad: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[]\n  ): Promise<DataResult[]> {\n    try {\n      let results = await callDataStrategyImpl(\n        dataStrategyImpl,\n        type,\n        request,\n        matchesToLoad,\n        matches,\n        manifest,\n        mapRouteProperties\n      );\n\n      return await Promise.all(\n        results.map((result, i) => {\n          if (isRedirectHandlerResult(result)) {\n            let response = result.result as Response;\n            return {\n              type: ResultType.redirect,\n              response: normalizeRelativeRoutingRedirectResponse(\n                response,\n                request,\n                matchesToLoad[i].route.id,\n                matches,\n                basename,\n                future.v7_relativeSplatPath\n              ),\n            };\n          }\n\n          return convertHandlerResultToDataResult(result);\n        })\n      );\n    } catch (e) {\n      // If the outer dataStrategy method throws, just return the error for all\n      // matches - and it'll naturally bubble to the root\n      return matchesToLoad.map(() => ({\n        type: ResultType.error,\n        error: e,\n      }));\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    let [loaderResults, ...fetcherResults] = await Promise.all([\n      matchesToLoad.length\n        ? callDataStrategy(\"loader\", request, matchesToLoad, matches)\n        : [],\n      ...fetchersToLoad.map((f) => {\n        if (f.matches && f.match && f.controller) {\n          let fetcherRequest = createClientSideRequest(\n            init.history,\n            f.path,\n            f.controller.signal\n          );\n          return callDataStrategy(\n            \"loader\",\n            fetcherRequest,\n            [f.match],\n            f.matches\n          ).then((r) => r[0]);\n        } else {\n          return Promise.resolve<DataResult>({\n            type: ResultType.error,\n            error: getInternalRouterError(404, {\n              pathname: f.path,\n            }),\n          });\n        }\n      }),\n    ]);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        loaderResults.map(() => request.signal),\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map((f) => f.match),\n        fetcherResults,\n        fetchersToLoad.map((f) => (f.controller ? f.controller.signal : null)),\n        true\n      ),\n    ]);\n\n    return {\n      loaderResults,\n      fetcherResults,\n    };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.add(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function updateFetcherState(\n    key: string,\n    fetcher: Fetcher,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    state.fetchers.set(key, fetcher);\n    updateState(\n      { fetchers: new Map(state.fetchers) },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function setFetcherError(\n    key: string,\n    routeId: string,\n    error: any,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState(\n      {\n        errors: {\n          [boundaryMatch.route.id]: error,\n        },\n        fetchers: new Map(state.fetchers),\n      },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n      // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  function deleteFetcher(key: string): void {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (\n      fetchControllers.has(key) &&\n      !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))\n    ) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    cancelledFetcherLoads.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function deleteFetcherAndUpdateState(key: string): void {\n    if (future.v7_fetcherPersist) {\n      let count = (activeFetchers.get(key) || 0) - 1;\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): boolean {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({ blockers });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function handleNavigational404(pathname: string) {\n    let error = getInternalRouterError(404, { pathname });\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let { matches, route } = getShortCircuitMatches(routesToUse);\n\n    // Cancel all pending deferred on 404s since we don't keep any routes\n    cancelActiveDeferreds();\n\n    return { notFoundMatches: matches, route, error };\n  }\n\n  function handleDiscoverRouteError(\n    pathname: string,\n    discoverResult: DiscoverRoutesErrorResult\n  ) {\n    return {\n      boundaryId: findNearestBoundary(discoverResult.partialMatches).route.id,\n      error: getInternalRouterError(400, {\n        type: \"route-discovery\",\n        pathname,\n        message:\n          discoverResult.error != null && \"message\" in discoverResult.error\n            ? discoverResult.error\n            : String(discoverResult.error),\n      }),\n    };\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function getScrollKey(location: Location, matches: AgnosticDataRouteMatch[]) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(\n        location,\n        matches.map((m) => convertRouteMatchToUiMatch(m, state.loaderData))\n      );\n      return key || location.key;\n    }\n    return location.key;\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  function checkFogOfWar(\n    matches: AgnosticDataRouteMatch[] | null,\n    routesToUse: AgnosticDataRouteObject[],\n    pathname: string\n  ): { active: boolean; matches: AgnosticDataRouteMatch[] | null } {\n    if (patchRoutesOnNavigationImpl) {\n      // Don't bother re-calling patchRouteOnMiss for a path we've already\n      // processed.  the last execution would have patched the route tree\n      // accordingly so `matches` here are already accurate.\n      if (discoveredRoutes.has(pathname)) {\n        return { active: false, matches };\n      }\n\n      if (!matches) {\n        let fogMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n          routesToUse,\n          pathname,\n          basename,\n          true\n        );\n\n        return { active: true, matches: fogMatches || [] };\n      } else {\n        if (Object.keys(matches[0].params).length > 0) {\n          // If we matched a dynamic param or a splat, it might only be because\n          // we haven't yet discovered other routes that would match with a\n          // higher score.  Call patchRoutesOnNavigation just to be sure\n          let partialMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n            routesToUse,\n            pathname,\n            basename,\n            true\n          );\n          return { active: true, matches: partialMatches };\n        }\n      }\n    }\n\n    return { active: false, matches: null };\n  }\n\n  type DiscoverRoutesSuccessResult = {\n    type: \"success\";\n    matches: AgnosticDataRouteMatch[] | null;\n  };\n  type DiscoverRoutesErrorResult = {\n    type: \"error\";\n    error: any;\n    partialMatches: AgnosticDataRouteMatch[];\n  };\n  type DiscoverRoutesAbortedResult = { type: \"aborted\" };\n  type DiscoverRoutesResult =\n    | DiscoverRoutesSuccessResult\n    | DiscoverRoutesErrorResult\n    | DiscoverRoutesAbortedResult;\n\n  async function discoverRoutes(\n    matches: AgnosticDataRouteMatch[],\n    pathname: string,\n    signal: AbortSignal\n  ): Promise<DiscoverRoutesResult> {\n    let partialMatches: AgnosticDataRouteMatch[] | null = matches;\n    while (true) {\n      let isNonHMR = inFlightDataRoutes == null;\n      let routesToUse = inFlightDataRoutes || dataRoutes;\n      try {\n        await loadLazyRouteChildren(\n          patchRoutesOnNavigationImpl!,\n          pathname,\n          partialMatches,\n          routesToUse,\n          manifest,\n          mapRouteProperties,\n          pendingPatchRoutes,\n          signal\n        );\n      } catch (e) {\n        return { type: \"error\", error: e, partialMatches };\n      } finally {\n        // If we are not in the middle of an HMR revalidation and we changed the\n        // routes, provide a new identity so when we `updateState` at the end of\n        // this navigation/fetch `router.routes` will be a new identity and\n        // trigger a re-run of memoized `router.routes` dependencies.\n        // HMR will already update the identity and reflow when it lands\n        // `inFlightDataRoutes` in `completeNavigation`\n        if (isNonHMR) {\n          dataRoutes = [...dataRoutes];\n        }\n      }\n\n      if (signal.aborted) {\n        return { type: \"aborted\" };\n      }\n\n      let newMatches = matchRoutes(routesToUse, pathname, basename);\n      if (newMatches) {\n        addToFifoQueue(pathname, discoveredRoutes);\n        return { type: \"success\", matches: newMatches };\n      }\n\n      let newPartialMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n        routesToUse,\n        pathname,\n        basename,\n        true\n      );\n\n      // Avoid loops if the second pass results in the same partial matches\n      if (\n        !newPartialMatches ||\n        (partialMatches.length === newPartialMatches.length &&\n          partialMatches.every(\n            (m, i) => m.route.id === newPartialMatches![i].route.id\n          ))\n      ) {\n        addToFifoQueue(pathname, discoveredRoutes);\n        return { type: \"success\", matches: null };\n      }\n\n      partialMatches = newPartialMatches;\n    }\n  }\n\n  function addToFifoQueue(path: string, queue: Set<string>) {\n    if (queue.size >= discoveredRoutesMaxSize) {\n      let first = queue.values().next().value;\n      queue.delete(first);\n    }\n    queue.add(path);\n  }\n\n  function _internalSetRoutes(newRoutes: AgnosticDataRouteObject[]) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(\n      newRoutes,\n      mapRouteProperties,\n      undefined,\n      manifest\n    );\n  }\n\n  function patchRoutes(\n    routeId: string | null,\n    children: AgnosticRouteObject[]\n  ): void {\n    let isNonHMR = inFlightDataRoutes == null;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    patchRoutesImpl(\n      routeId,\n      children,\n      routesToUse,\n      manifest,\n      mapRouteProperties\n    );\n\n    // If we are not in the middle of an HMR revalidation and we changed the\n    // routes, provide a new identity and trigger a reflow via `updateState`\n    // to re-run memoized `router.routes` dependencies.\n    // HMR will already update the identity and reflow when it lands\n    // `inFlightDataRoutes` in `completeNavigation`\n    if (isNonHMR) {\n      dataRoutes = [...dataRoutes];\n      updateState({});\n    }\n  }\n\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    patchRoutes,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface StaticHandlerFutureConfig {\n  v7_relativeSplatPath: boolean;\n  v7_throwAbortReason: boolean;\n}\n\nexport interface CreateStaticHandlerOptions {\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<StaticHandlerFutureConfig>;\n}\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: CreateStaticHandlerOptions\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let manifest: RouteManifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (opts?.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts?.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  let future: StaticHandlerFutureConfig = {\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false,\n    ...(opts ? opts.future : null),\n  };\n\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   *\n   * - `opts.requestContext` is an optional server context that will be passed\n   *   to actions/loaders in the `context` parameter\n   * - `opts.skipLoaderErrorBubbling` is an optional parameter that will prevent\n   *   the bubbling of errors which allows single-fetch-type implementations\n   *   where the client will handle the bubbling and we may need to return data\n   *   for the handling route\n   */\n  async function query(\n    request: Request,\n    {\n      requestContext,\n      skipLoaderErrorBubbling,\n      unstable_dataStrategy,\n    }: {\n      requestContext?: unknown;\n      skipLoaderErrorBubbling?: boolean;\n      unstable_dataStrategy?: DataStrategyFunction;\n    } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      unstable_dataStrategy || null,\n      skipLoaderErrorBubbling === true,\n      null\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   *\n   * - `opts.routeId` allows you to specify the specific route handler to call.\n   *   If not provided the handler will determine the proper route by matching\n   *   against `request.url`\n   * - `opts.requestContext` is an optional server context that will be passed\n   *    to actions/loaders in the `context` parameter\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n      unstable_dataStrategy,\n    }: {\n      requestContext?: unknown;\n      routeId?: string;\n      unstable_dataStrategy?: DataStrategyFunction;\n    } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      unstable_dataStrategy || null,\n      false,\n      match\n    );\n\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    routeMatch: AgnosticDataRouteMatch | null\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          unstable_dataStrategy,\n          skipLoaderErrorBubbling,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        unstable_dataStrategy,\n        skipLoaderErrorBubbling,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction for a\n      // `queryRoute` call, we throw the `HandlerResult` to bail out early\n      // and then return or throw the raw Response here accordingly\n      if (isHandlerResult(e) && isResponse(e.result)) {\n        if (e.type === ResultType.error) {\n          throw e.result;\n        }\n        return e.result;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      let results = await callDataStrategy(\n        \"action\",\n        request,\n        [actionMatch],\n        matches,\n        isRouteRequest,\n        requestContext,\n        unstable_dataStrategy\n      );\n      result = results[0];\n\n      if (request.signal.aborted) {\n        throwStaticHandlerAbortedError(request, isRouteRequest, future);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.response.status,\n        headers: {\n          Location: result.response.headers.get(\"Location\")!,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = skipLoaderErrorBubbling\n        ? actionMatch\n        : findNearestBoundary(matches, actionMatch.route.id);\n\n      let context = await loadRouteData(\n        loaderRequest,\n        matches,\n        requestContext,\n        unstable_dataStrategy,\n        skipLoaderErrorBubbling,\n        null,\n        [boundaryMatch.route.id, result]\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : result.statusCode != null\n          ? result.statusCode\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    let context = await loadRouteData(\n      loaderRequest,\n      matches,\n      requestContext,\n      unstable_dataStrategy,\n      skipLoaderErrorBubbling,\n      null\n    );\n\n    return {\n      ...context,\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionHeaders: result.headers\n        ? { [actionMatch.route.id]: result.headers }\n        : {},\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    routeMatch: AgnosticDataRouteMatch | null,\n    pendingActionResult?: PendingActionResult\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (\n      isRouteRequest &&\n      !routeMatch?.route.loader &&\n      !routeMatch?.route.lazy\n    ) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? getLoaderMatchesUntilBoundary(matches, pendingActionResult[0])\n      : matches;\n    let matchesToLoad = requestMatches.filter(\n      (m) => m.route.loader || m.route.lazy\n    );\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors:\n          pendingActionResult && isErrorResult(pendingActionResult[1])\n            ? {\n                [pendingActionResult[0]]: pendingActionResult[1].error,\n              }\n            : null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await callDataStrategy(\n      \"loader\",\n      request,\n      matchesToLoad,\n      matches,\n      isRouteRequest,\n      requestContext,\n      unstable_dataStrategy\n    );\n\n    if (request.signal.aborted) {\n      throwStaticHandlerAbortedError(request, isRouteRequest, future);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionResult,\n      activeDeferreds,\n      skipLoaderErrorBubbling\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  // Utility wrapper for calling dataStrategy server-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(\n    type: \"loader\" | \"action\",\n    request: Request,\n    matchesToLoad: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    isRouteRequest: boolean,\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null\n  ): Promise<DataResult[]> {\n    let results = await callDataStrategyImpl(\n      unstable_dataStrategy || defaultDataStrategy,\n      type,\n      request,\n      matchesToLoad,\n      matches,\n      manifest,\n      mapRouteProperties,\n      requestContext\n    );\n\n    return await Promise.all(\n      results.map((result, i) => {\n        if (isRedirectHandlerResult(result)) {\n          let response = result.result as Response;\n          // Throw redirects and let the server handle them with an HTTP redirect\n          throw normalizeRelativeRoutingRedirectResponse(\n            response,\n            request,\n            matchesToLoad[i].route.id,\n            matches,\n            basename,\n            future.v7_relativeSplatPath\n          );\n        }\n        if (isResponse(result.result) && isRouteRequest) {\n          // For SSR single-route requests, we want to hand Responses back\n          // directly without unwrapping\n          throw result;\n        }\n\n        return convertHandlerResultToDataResult(result);\n      })\n    );\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction throwStaticHandlerAbortedError(\n  request: Request,\n  isRouteRequest: boolean,\n  future: StaticHandlerFutureConfig\n) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n\n  let method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(`${method}() call aborted: ${request.method} ${request.url}`);\n}\n\nfunction isSubmissionNavigation(\n  opts: BaseNavigateOrFetchOptions\n): opts is SubmissionNavigateOptions {\n  return (\n    opts != null &&\n    ((\"formData\" in opts && opts.formData != null) ||\n      (\"body\" in opts && opts.body !== undefined))\n  );\n}\n\nfunction normalizeTo(\n  location: Path,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  prependBasename: boolean,\n  to: To | null,\n  v7_relativeSplatPath: boolean,\n  fromRouteId?: string,\n  relative?: RelativeRoutingType\n) {\n  let contextualMatches: AgnosticDataRouteMatch[];\n  let activeRouteMatch: AgnosticDataRouteMatch | undefined;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n\n  // Resolve the relative path\n  let path = resolveTo(\n    to ? to : \".\",\n    getResolveToMatches(contextualMatches, v7_relativeSplatPath),\n    stripBasename(location.pathname, basename) || location.pathname,\n    relative === \"path\"\n  );\n\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n\n  // Add an ?index param for matched index routes if we don't already have one\n  if (\n    (to == null || to === \"\" || to === \".\") &&\n    activeRouteMatch &&\n    activeRouteMatch.route.index &&\n    !hasNakedIndexQuery(path.search)\n  ) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  normalizeFormMethod: boolean,\n  isFetcher: boolean,\n  path: string,\n  opts?: BaseNavigateOrFetchOptions\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponseImpl;\n} {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, { type: \"invalid-body\" }),\n  });\n\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod\n    ? (rawFormMethod.toUpperCase() as V7_FormMethod)\n    : (rawFormMethod.toLowerCase() as FormMethod);\n  let formAction = stripHashFromPath(path);\n\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      let text =\n        typeof opts.body === \"string\"\n          ? opts.body\n          : opts.body instanceof FormData ||\n            opts.body instanceof URLSearchParams\n          ? // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n            Array.from(opts.body.entries()).reduce(\n              (acc, [name, value]) => `${acc}${name}=${value}\\n`,\n              \"\"\n            )\n          : String(opts.body);\n\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text,\n        },\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      try {\n        let json =\n          typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined,\n          },\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n\n  invariant(\n    typeof FormData === \"function\",\n    \"FormData is not available in this environment\"\n  );\n\n  let searchParams: URLSearchParams;\n  let formData: FormData;\n\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n\n  let submission: Submission = {\n    formMethod,\n    formAction,\n    formEncType:\n      (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined,\n  };\n\n  if (isMutationMethod(submission.formMethod)) {\n    return { path, submission };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isInitialLoad: boolean,\n  skipActionErrorRevalidation: boolean,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: Set<string>,\n  deletedFetchers: Set<string>,\n  fetchLoadMatches: Map<string, FetchLoadMatch>,\n  fetchRedirectIds: Set<string>,\n  routesToUse: AgnosticDataRouteObject[],\n  basename: string | undefined,\n  pendingActionResult?: PendingActionResult\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingActionResult\n    ? isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[1].error\n      : pendingActionResult[1].data\n    : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId =\n    pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[0]\n      : undefined;\n  let boundaryMatches = boundaryId\n    ? getLoaderMatchesUntilBoundary(matches, boundaryId)\n    : matches;\n\n  // Don't revalidate loaders by default after action 4xx/5xx responses\n  // when the flag is enabled.  They can still opt-into revalidation via\n  // `shouldRevalidate` via `actionResult`\n  let actionStatus = pendingActionResult\n    ? pendingActionResult[1].statusCode\n    : undefined;\n  let shouldSkipRevalidation =\n    skipActionErrorRevalidation && actionStatus && actionStatus >= 400;\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    let { route } = match;\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n\n    if (route.loader == null) {\n      return false;\n    }\n\n    if (isInitialLoad) {\n      if (typeof route.loader !== \"function\" || route.loader.hydrate) {\n        return true;\n      }\n      return (\n        state.loaderData[route.id] === undefined &&\n        // Don't re-run if the loader ran and threw an error\n        (!state.errors || state.errors[route.id] === undefined)\n      );\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      actionStatus,\n      defaultShouldRevalidate: shouldSkipRevalidation\n        ? false\n        : // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n          isRevalidationRequired ||\n          currentUrl.pathname + currentUrl.search ===\n            nextUrl.pathname + nextUrl.search ||\n          // Search params affect all loaders\n          currentUrl.search !== nextUrl.search ||\n          isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial load (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (\n      isInitialLoad ||\n      !matches.some((m) => m.route.id === f.routeId) ||\n      deletedFetchers.has(key)\n    ) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null,\n      });\n      return;\n    }\n\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.has(key)) {\n      // Always mark for revalidation if the fetcher was cancelled\n      cancelledFetcherLoads.delete(key);\n      shouldRevalidate = true;\n    } else if (\n      fetcher &&\n      fetcher.state !== \"idle\" &&\n      fetcher.data === undefined\n    ) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, {\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params,\n        ...submission,\n        actionResult,\n        actionStatus,\n        defaultShouldRevalidate: shouldSkipRevalidation\n          ? false\n          : isRevalidationRequired,\n      });\n    }\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController(),\n      });\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: ShouldRevalidateFunctionArgs\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\n/**\n * Idempotent utility to execute patchRoutesOnNavigation() to lazily load route\n * definitions and update the routes/routeManifest\n */\nasync function loadLazyRouteChildren(\n  patchRoutesOnNavigationImpl: AgnosticPatchRoutesOnNavigationFunction,\n  path: string,\n  matches: AgnosticDataRouteMatch[],\n  routes: AgnosticDataRouteObject[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  pendingRouteChildren: Map<\n    string,\n    ReturnType<typeof patchRoutesOnNavigationImpl>\n  >,\n  signal: AbortSignal\n) {\n  let key = [path, ...matches.map((m) => m.route.id)].join(\"-\");\n  try {\n    let pending = pendingRouteChildren.get(key);\n    if (!pending) {\n      pending = patchRoutesOnNavigationImpl({\n        path,\n        matches,\n        patch: (routeId, children) => {\n          if (!signal.aborted) {\n            patchRoutesImpl(\n              routeId,\n              children,\n              routes,\n              manifest,\n              mapRouteProperties\n            );\n          }\n        },\n      });\n      pendingRouteChildren.set(key, pending);\n    }\n\n    if (pending && isPromise<AgnosticRouteObject[]>(pending)) {\n      await pending;\n    }\n  } finally {\n    pendingRouteChildren.delete(key);\n  }\n}\n\nfunction patchRoutesImpl(\n  routeId: string | null,\n  children: AgnosticRouteObject[],\n  routesToUse: AgnosticDataRouteObject[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction\n) {\n  if (routeId) {\n    let route = manifest[routeId];\n    invariant(\n      route,\n      `No route found to patch children into: routeId = ${routeId}`\n    );\n    let dataChildren = convertRoutesToDataRoutes(\n      children,\n      mapRouteProperties,\n      [routeId, \"patch\", String(route.children?.length || \"0\")],\n      manifest\n    );\n    if (route.children) {\n      route.children.push(...dataChildren);\n    } else {\n      route.children = dataChildren;\n    }\n  } else {\n    let dataChildren = convertRoutesToDataRoutes(\n      children,\n      mapRouteProperties,\n      [\"patch\", String(routesToUse.length || \"0\")],\n      manifest\n    );\n    routesToUse.push(...dataChildren);\n  }\n}\n\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(\n  route: AgnosticDataRouteObject,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  manifest: RouteManifest\n) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy();\n\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates: Record<string, any> = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue =\n      routeToUpdate[lazyRouteProperty as keyof typeof routeToUpdate];\n\n    let isPropertyStaticallyDefined =\n      staticRouteValue !== undefined &&\n      // This property isn't static since it should always be updated based\n      // on the route updates\n      lazyRouteProperty !== \"hasErrorBoundary\";\n\n    warning(\n      !isPropertyStaticallyDefined,\n      `Route \"${routeToUpdate.id}\" has a static property \"${lazyRouteProperty}\" ` +\n        `defined but its lazy function is also returning a value for this property. ` +\n        `The lazy route property \"${lazyRouteProperty}\" will be ignored.`\n    );\n\n    if (\n      !isPropertyStaticallyDefined &&\n      !immutableRouteKeys.has(lazyRouteProperty as ImmutableRouteKey)\n    ) {\n      routeUpdates[lazyRouteProperty] =\n        lazyRoute[lazyRouteProperty as keyof typeof lazyRoute];\n    }\n  }\n\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `mapRouteProperties` (or wrapped `detectErrorBoundary`) function to\n    // set the framework-aware properties (`element`/`hasErrorBoundary`) since\n    // the logic will differ between frameworks.\n    ...mapRouteProperties(routeToUpdate),\n    lazy: undefined,\n  });\n}\n\n// Default implementation of `dataStrategy` which fetches all loaders in parallel\nfunction defaultDataStrategy(\n  opts: DataStrategyFunctionArgs\n): ReturnType<DataStrategyFunction> {\n  return Promise.all(opts.matches.map((m) => m.resolve()));\n}\n\nasync function callDataStrategyImpl(\n  dataStrategyImpl: DataStrategyFunction,\n  type: \"loader\" | \"action\",\n  request: Request,\n  matchesToLoad: AgnosticDataRouteMatch[],\n  matches: AgnosticDataRouteMatch[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  requestContext?: unknown\n): Promise<HandlerResult[]> {\n  let routeIdsToLoad = matchesToLoad.reduce(\n    (acc, m) => acc.add(m.route.id),\n    new Set<string>()\n  );\n  let loadedMatches = new Set<string>();\n\n  // Send all matches here to allow for a middleware-type implementation.\n  // handler will be a no-op for unneeded routes and we filter those results\n  // back out below.\n  let results = await dataStrategyImpl({\n    matches: matches.map((match) => {\n      let shouldLoad = routeIdsToLoad.has(match.route.id);\n      // `resolve` encapsulates the route.lazy, executing the\n      // loader/action, and mapping return values/thrown errors to a\n      // HandlerResult.  Users can pass a callback to take fine-grained control\n      // over the execution of the loader/action\n      let resolve: DataStrategyMatch[\"resolve\"] = (handlerOverride) => {\n        loadedMatches.add(match.route.id);\n        return shouldLoad\n          ? callLoaderOrAction(\n              type,\n              request,\n              match,\n              manifest,\n              mapRouteProperties,\n              handlerOverride,\n              requestContext\n            )\n          : Promise.resolve({ type: ResultType.data, result: undefined });\n      };\n\n      return {\n        ...match,\n        shouldLoad,\n        resolve,\n      };\n    }),\n    request,\n    params: matches[0].params,\n    context: requestContext,\n  });\n\n  // Throw if any loadRoute implementations not called since they are what\n  // ensures a route is fully loaded\n  matches.forEach((m) =>\n    invariant(\n      loadedMatches.has(m.route.id),\n      `\\`match.resolve()\\` was not called for route id \"${m.route.id}\". ` +\n        \"You must call `match.resolve()` on every match passed to \" +\n        \"`dataStrategy` to ensure all routes are properly loaded.\"\n    )\n  );\n\n  // Filter out any middleware-only matches for which we didn't need to run handlers\n  return results.filter((_, i) => routeIdsToLoad.has(matches[i].route.id));\n}\n\n// Default logic for calling a loader/action is the user has no specified a dataStrategy\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  handlerOverride: Parameters<DataStrategyMatch[\"resolve\"]>[0],\n  staticContext?: unknown\n): Promise<HandlerResult> {\n  let result: HandlerResult;\n  let onReject: (() => void) | undefined;\n\n  let runHandler = (\n    handler: AgnosticRouteObject[\"loader\"] | AgnosticRouteObject[\"action\"]\n  ): Promise<HandlerResult> => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject: () => void;\n    // This will never resolve so safe to type it as Promise<HandlerResult> to\n    // satisfy the function return value\n    let abortPromise = new Promise<HandlerResult>((_, r) => (reject = r));\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n\n    let actualHandler = (ctx?: unknown) => {\n      if (typeof handler !== \"function\") {\n        return Promise.reject(\n          new Error(\n            `You cannot call the handler for a route which defines a boolean ` +\n              `\"${type}\" [routeId: ${match.route.id}]`\n          )\n        );\n      }\n      return handler(\n        {\n          request,\n          params: match.params,\n          context: staticContext,\n        },\n        ...(ctx !== undefined ? [ctx] : [])\n      );\n    };\n\n    let handlerPromise: Promise<HandlerResult>;\n    if (handlerOverride) {\n      handlerPromise = handlerOverride((ctx: unknown) => actualHandler(ctx));\n    } else {\n      handlerPromise = (async () => {\n        try {\n          let val = await actualHandler();\n          return { type: \"data\", result: val };\n        } catch (e) {\n          return { type: \"error\", result: e };\n        }\n      })();\n    }\n\n    return Promise.race([handlerPromise, abortPromise]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let [value] = await Promise.all([\n          // If the handler throws, don't let it immediately bubble out,\n          // since we need to let the lazy() execution finish so we know if this\n          // route has a boundary that can handle the error\n          runHandler(handler).catch((e) => {\n            handlerError = e;\n          }),\n          loadLazyRouteModule(match.route, mapRouteProperties, manifest),\n        ]);\n        if (handlerError !== undefined) {\n          throw handlerError;\n        }\n        result = value!;\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n\n        handler = match.route[type];\n        if (handler) {\n          // Handler still runs even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id,\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return { type: ResultType.data, result: undefined };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname,\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n\n    invariant(\n      result.result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    // We should already be catching and converting normal handler executions to\n    // HandlerResults and returning them, so anything that throws here is an\n    // unexpected error we still need to wrap\n    return { type: ResultType.error, result: e };\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  return result;\n}\n\nasync function convertHandlerResultToDataResult(\n  handlerResult: HandlerResult\n): Promise<DataResult> {\n  let { result, type } = handlerResult;\n\n  if (isResponse(result)) {\n    let data: any;\n\n    try {\n      let contentType = result.headers.get(\"Content-Type\");\n      // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data = null;\n        } else {\n          data = await result.json();\n        }\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return { type: ResultType.error, error: e };\n    }\n\n    if (type === ResultType.error) {\n      return {\n        type: ResultType.error,\n        error: new ErrorResponseImpl(result.status, result.statusText, data),\n        statusCode: result.status,\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (type === ResultType.error) {\n    if (isDataWithResponseInit(result)) {\n      if (result.data instanceof Error) {\n        return {\n          type: ResultType.error,\n          error: result.data,\n          statusCode: result.init?.status,\n        };\n      }\n\n      // Convert thrown unstable_data() to ErrorResponse instances\n      result = new ErrorResponseImpl(\n        result.init?.status || 500,\n        undefined,\n        result.data\n      );\n    }\n    return {\n      type: ResultType.error,\n      error: result,\n      statusCode: isRouteErrorResponse(result) ? result.status : undefined,\n    };\n  }\n\n  if (isDeferredData(result)) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: result.init?.status,\n      headers: result.init?.headers && new Headers(result.init.headers),\n    };\n  }\n\n  if (isDataWithResponseInit(result)) {\n    return {\n      type: ResultType.data,\n      data: result.data,\n      statusCode: result.init?.status,\n      headers: result.init?.headers\n        ? new Headers(result.init.headers)\n        : undefined,\n    };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Support relative routing in internal redirects\nfunction normalizeRelativeRoutingRedirectResponse(\n  response: Response,\n  request: Request,\n  routeId: string,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  v7_relativeSplatPath: boolean\n) {\n  let location = response.headers.get(\"Location\");\n  invariant(\n    location,\n    \"Redirects returned/thrown from loaders/actions must have a Location header\"\n  );\n\n  if (!ABSOLUTE_URL_REGEX.test(location)) {\n    let trimmedMatches = matches.slice(\n      0,\n      matches.findIndex((m) => m.route.id === routeId) + 1\n    );\n    location = normalizeTo(\n      new URL(request.url),\n      trimmedMatches,\n      basename,\n      true,\n      location,\n      v7_relativeSplatPath\n    );\n    response.headers.set(\"Location\", location);\n  }\n\n  return response;\n}\n\nfunction normalizeRedirectLocation(\n  location: string,\n  currentUrl: URL,\n  basename: string\n): string {\n  if (ABSOLUTE_URL_REGEX.test(location)) {\n    // Strip off the protocol+origin for same-origin + same-basename absolute redirects\n    let normalizedLocation = location;\n    let url = normalizedLocation.startsWith(\"//\")\n      ? new URL(currentUrl.protocol + normalizedLocation)\n      : new URL(normalizedLocation);\n    let isSameBasename = stripBasename(url.pathname, basename) != null;\n    if (url.origin === currentUrl.origin && isSameBasename) {\n      return url.pathname + url.search + url.hash;\n    }\n  }\n  return location;\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({ \"Content-Type\": formEncType });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (\n      formEncType === \"application/x-www-form-urlencoded\" &&\n      submission.formData\n    ) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n\n  return searchParams;\n}\n\nfunction convertSearchParamsToFormData(\n  searchParams: URLSearchParams\n): FormData {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingActionResult: PendingActionResult | undefined,\n  activeDeferreds: Map<string, DeferredData>,\n  skipLoaderErrorBubbling: boolean\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n  let pendingError =\n    pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[1].error\n      : undefined;\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError !== undefined) {\n        error = pendingError;\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      if (skipLoaderErrorBubbling) {\n        errors[id] = error;\n      } else {\n        // Look upwards from the matched route for the closest ancestor error\n        // boundary, defaulting to the root match.  Prefer higher error values\n        // if lower errors bubble to the same boundary\n        let boundaryMatch = findNearestBoundary(matches, id);\n        if (errors[boundaryMatch.route.id] == null) {\n          errors[boundaryMatch.route.id] = error;\n        }\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (\n          result.statusCode != null &&\n          result.statusCode !== 200 &&\n          !foundError\n        ) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      } else {\n        loaderData[id] = result.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError !== undefined && pendingActionResult) {\n    errors = { [pendingActionResult[0]]: pendingError };\n    loaderData[pendingActionResult[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingActionResult: PendingActionResult | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingActionResult,\n    activeDeferreds,\n    false // This method is only called client side so we always want to bubble\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, match, controller } = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match?.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\nfunction getActionDataForCommit(\n  pendingActionResult: PendingActionResult | undefined\n) {\n  if (!pendingActionResult) {\n    return {};\n  }\n  return isErrorResult(pendingActionResult[1])\n    ? {\n        // Clear out prior actionData on errors\n        actionData: {},\n      }\n    : {\n        actionData: {\n          [pendingActionResult[0]]: pendingActionResult[1].data,\n        },\n      };\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route =\n    routes.length === 1\n      ? routes[0]\n      : routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n          id: `__shim-error-route__`,\n        };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n    message,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\" | \"invalid-body\" | \"route-discovery\";\n    message?: string;\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (type === \"route-discovery\") {\n      errorMessage =\n        `Unable to match URL \"${pathname}\" - the \\`unstable_patchRoutesOnNavigation()\\` ` +\n        `function threw the following error:\\n${message}`;\n    } else if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponseImpl(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(\n  results: DataResult[]\n): { result: RedirectResult; idx: number } | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return { result, idx: i };\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\n\nfunction isPromise<T = unknown>(val: unknown): val is Promise<T> {\n  return typeof val === \"object\" && val != null && \"then\" in val;\n}\n\nfunction isHandlerResult(result: unknown): result is HandlerResult {\n  return (\n    result != null &&\n    typeof result === \"object\" &&\n    \"type\" in result &&\n    \"result\" in result &&\n    (result.type === ResultType.data || result.type === ResultType.error)\n  );\n}\n\nfunction isRedirectHandlerResult(result: HandlerResult) {\n  return (\n    isResponse(result.result) && redirectStatusCodes.has(result.result.status)\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nexport function isDataWithResponseInit(\n  value: any\n): value is DataWithResponseInit<unknown> {\n  return (\n    typeof value === \"object\" &&\n    value != null &&\n    \"type\" in value &&\n    \"data\" in value &&\n    \"init\" in value &&\n    value.type === \"DataWithResponseInit\"\n  );\n}\n\nexport function isDeferredData(value: any): value is DeferredData {\n  let deferred: DeferredData = value;\n  return (\n    deferred &&\n    typeof deferred === \"object\" &&\n    typeof deferred.data === \"object\" &&\n    typeof deferred.subscribe === \"function\" &&\n    typeof deferred.cancel === \"function\" &&\n    typeof deferred.resolveData === \"function\"\n  );\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isValidMethod(method: string): method is FormMethod | V7_FormMethod {\n  return validRequestMethods.has(method.toLowerCase() as FormMethod);\n}\n\nfunction isMutationMethod(\n  method: string\n): method is MutationFormMethod | V7_MutationFormMethod {\n  return validMutationMethods.has(method.toLowerCase() as MutationFormMethod);\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: (AgnosticDataRouteMatch | null)[],\n  results: DataResult[],\n  signals: (AbortSignal | null)[],\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match!.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(\n        signal,\n        \"Expected an AbortSignal for revalidating fetcher deferred result\"\n      );\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n\nfunction getSubmissionFromNavigation(\n  navigation: Navigation\n): Submission | undefined {\n  let { formMethod, formAction, formEncType, text, formData, json } =\n    navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text,\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined,\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined,\n    };\n  }\n}\n\nfunction getLoadingNavigation(\n  location: Location,\n  submission?: Submission\n): NavigationStates[\"Loading\"] {\n  if (submission) {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n    };\n    return navigation;\n  } else {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n    };\n    return navigation;\n  }\n}\n\nfunction getSubmittingNavigation(\n  location: Location,\n  submission: Submission\n): NavigationStates[\"Submitting\"] {\n  let navigation: NavigationStates[\"Submitting\"] = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n  };\n  return navigation;\n}\n\nfunction getLoadingFetcher(\n  submission?: Submission,\n  data?: Fetcher[\"data\"]\n): FetcherStates[\"Loading\"] {\n  if (submission) {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data,\n    };\n    return fetcher;\n  } else {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data,\n    };\n    return fetcher;\n  }\n}\n\nfunction getSubmittingFetcher(\n  submission: Submission,\n  existingFetcher?: Fetcher\n): FetcherStates[\"Submitting\"] {\n  let fetcher: FetcherStates[\"Submitting\"] = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined,\n  };\n  return fetcher;\n}\n\nfunction getDoneFetcher(data: Fetcher[\"data\"]): FetcherStates[\"Idle\"] {\n  let fetcher: FetcherStates[\"Idle\"] = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data,\n  };\n  return fetcher;\n}\n\nfunction restoreAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(\n      TRANSITIONS_STORAGE_KEY\n    );\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\n\nfunction persistAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  if (transitions.size > 0) {\n    let json: Record<string, string[]> = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(\n        TRANSITIONS_STORAGE_KEY,\n        JSON.stringify(json)\n      );\n    } catch (error) {\n      warning(\n        false,\n        `Failed to save applied view transitions in sessionStorage (${error}).`\n      );\n    }\n  }\n}\n//#endregion\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}